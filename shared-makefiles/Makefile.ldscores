## Lightning Auriga, 28 June 2020
## run ldscore regression on all output analysis files

include $(PROJECT_BASE_DIR)/Makefile.config

RESULTS_DIR := $(RESULT_OUTPUT_DIR)

## acquire targets for methods separately; probably will merge later
## only acquire EUR analysis targets until ldsc run is resolved
SAIGE_TARGETS := $(shell find $(RESULTS_DIR) -wholename "*/European/SAIGE/*saige.tsv" -print)
BOLT_TARGETS := $(shell find $(RESULTS_DIR) -wholename "*/European/BOLTLMM/*boltlmm.tsv" -print)
#FASTGWA_TARGETS := $(shell find $(RESULTS_DIR) -wholename "*/European/FASTGWA/*fastgwa.tsv" -print)

ALL_OUTPUT := $(subst .tsv,.ldsc.log$(TRACKING_SUCCESS_SUFFIX),$(SAIGE_TARGETS) $(BOLT_TARGETS) $(FASTGWA_TARGETS))

## eventually add to global config
MUNGE_SUMSTATS := ~/Development/ldsc/munge_sumstats.py
LD_CHR := /CGF/GWAS/Scans/PLCO/builds/1/analysis-requests/ldsc/eur_w_ld_chr/
LD_CHR_GRCh38 := $(subst w_ld_chr/,w_ld_chr_GRCh38/,$(LD_CHR))
LD_TARGETS := $(patsubst %,$(LD_CHR_GRCh38)%.l2.M_5_50,$(CHRS))

## final output target with summary information for all analyses in one place
LDSCORE_SUMMARY := $(RESULTS_DIR)/ldscore_summary.tsv

.PHONY: all
.DELETE_ON_ERROR:
.SECONDARY:
.SECONDEXPANSION:
all: $(ALL_OUTPUT) $(LDSCORE_SUMMARY)

## patterns:
##    output: results/ldscore_summary.tsv
##    input:  results/{PHENOTYPES}/European/{METHODS}/{PHENOTYPE}.{CHIP}.{METHOD}.ldsc.report
## Notes: combine summary results from all runs into a single top-level file
$(LDSCORE_SUMMARY): $(subst .ldsc.log$(TRACKING_SUCCESS_SUFFIX),.ldsc.report,$(ALL_OUTPUT))
	cat $^ | sort -k 1,1 -k 2,2 -k 3,3 -k 4,4 | awk 'NR == 1 {print "phenotype\tplatform\tancestry\tmethod\tinflation_factor\tintercept\terror"} ; {print $$0}' | sed 's/(// ; s/)//' > $@

## patterns:
##    output: results/{PHENOTYPE}/European/{METHOD}/{PHENOTYPE}.{CHIP}.{METHOD}.ldsc.report
##    input:  results/{PHENOTYPE}/European/{METHOD}/{PHENOTYPE}.{CHIP}.{METHOD}.ldsc.log$(TRACKING_SUCCESS_SUFFIX)
## Notes: pull out GC lambda and ldscore regression intercept into a single line file
%.ldsc.report: %.ldsc.log$(TRACKING_SUCCESS_SUFFIX)
	echo "$(word 2,$(subst /, ,$(subst $(RESULTS_DIR),,$(dir $<)))) $(notdir $<)" | sed 's/.ldsc.log$(TRACKING_SUCCESS_SUFFIX)// ; s/\./\t/ ; s/\./\t/' | awk '{printf("%s\t%s\t%s\t%s\t", $$2, $$3, $$1, $$4)}' > $@
	grep -E "Lambda GC|Intercept" $(subst $(TRACKING_SUCCESS_SUFFIX),,$^) | sed 's/:/\t/g' | awk '/Lambda GC/ {printf("%s\t",$$3)} ; /Intercept/ {print $$2"\t"$$3}' >> $@

## patterns:
##    output: results/{PHENOTYPE}/European/{METHOD}/{PHENOTYPE}.{CHIP}.{METHOD}.ldsc.log$(TRACKING_SUCCESS_SUFFIX)
##    input:  results/{PHENOTYPE}/European/{METHOD}/{PHENOTYPE}.{CHIP}.{METHOD}.ldsc.sumstats.gz$(TRACKING_SUCCESS_SUFFIX)
##    input:  {ldsc_data_GRCh38}/{CHR}.l2.M_5_50
## Notes: actually run ldscore regression. Do heritability estimation as they term it on their wiki, then extract the values from the log file
%.ldsc.log$(TRACKING_SUCCESS_SUFFIX): %.ldsc.sumstats.gz$(TRACKING_SUCCESS_SUFFIX) $(LD_TARGETS)
	$(call qsub_handler,$(subst $(TRACKING_SUCCESS_SUFFIX),,$@),$(LDSC_PY) --h2 $(subst $(TRACKING_SUCCESS_SUFFIX),,$<) --ref-ld-chr $(LD_CHR_GRCh38) --w-ld-chr $(LD_CHR_GRCh38) --out $(subst .log$(TRACKING_SUCCESS_SUFFIX),,$@))

## patterns:
##    output: results/{PHENOTYPE}/European/{METHOD}/{PHENOTYPE}.{CHIP}.{METHOD}.ldsc.sumstats.gz$(TRACKING_SUCCESS_SUFFIX)
##    input:  results/{PHENOTYPE}/European/{METHOD}/{PHENOTYPE}.{CHIP}.{METHOD}.ldsc.ldsc-processed.tsv
## Notes: run their ridiculous "munge_sumstats" script to get the analysis results in a format ldsc accepts
COMMA := ,
%.ldsc.sumstats.gz$(TRACKING_SUCCESS_SUFFIX): %.ldsc.ldsc-processed.tsv
	$(call qsub_handler,$(subst $(TRACKING_SUCCESS_SUFFIX),,$@),$(MUNGE_SUMSTATS) --signed-sumstats STAT$(COMMA)0 --out $(subst .sumstats.gz$(TRACKING_SUCCESS_SUFFIX),,$@) --a1-inc --frq Freq_Tested_Allele_in_TOPMed --N-col N --a1 Tested_Allele --a2 Other_Allele --snp SNP --sumstats $< --p P)

## patterns:
##    output: results/{PHENOTYPE}/European/{METHOD}/{PHENOTYPE}.{CHIP}.{METHOD}.ldsc.ldsc-processed.tsv
##    input:  results/{PHENOTYPE}/European/{METHOD}/{PHENOTYPE}.{CHIP}.{METHOD}.tsv
## Notes: since their ridiculous "munge_sumstats" script doesn't really munge very well, preprocess data
##    to contain signed test statistic, and then just the other columns it expects.
%.ldsc.ldsc-processed.tsv: %.tsv
	awk 'NR > 1 {$$7 = $$7 / $$8 ; print $$1":"$$2"\t"$$4"\t"$$5"\t"$$6"\t"$$7"\t"$$9"\t"$$10} ; NR == 1 {print "SNP\tTested_Allele\tOther_Allele\tFreq_Tested_Allele_in_TOPMed\tSTAT\tP\tN"}' $< > $@

## patterns:
##    output: {ldsc_data_GRCh38}/{CHR}.l2.M_5_50
##    input:  {ldsc_data_GRCh38}/{CHR}.l2.ldscore.gz
##    input:  {ldsc_data_GRCh38}
## Notes: take a set of ldsc output data and emit the bizarre summary file with a single number, the
##    number of variants with MAF >= 5% in the corresponding ldsc file :(
$(LD_CHR_GRCh38)%.l2.M_5_50: $(LD_CHR_GRCh38)%.l2.ldscore.gz | $$(dir $$@)
	gunzip -c $< | awk 'NR > 1 && $$5 >= 0.05' | wc -l > $@

## patterns:
##    output: {ldsc_data_GRCh38}/{CHR}.l2.ldscore.gz
##    input:  {ldsc_data_GRCh38}/{CHR}.lifted.bed
##    input:  {ldsc_data_GRCh38}
## Notes: take liftOver output and reformat it back into ldsc compatible format.
$(LD_CHR_GRCh38)%.l2.ldscore.gz: $(LD_CHR_GRCh38)%.lifted.bed | $$(dir $$@)
	sed 's/:/\t/g ; s/^chr//' $< | awk 'NR == 1 {print "CHR\tSNP\tBP\tCM\tMAF\tL2"} ; {print $$1"\t"$$1":"$$2+1"\t"$$2+1"\t0\t"$$5"\t"$$6}' | gzip -c > $@

## patterns:
##    output: {ldsc_data_GRCh38}/{CHR}.lifted.bed
##    input:  {ldsc_data_GRCh38}/{CHR}.input.bed
##    input:  {ldsc_data_GRCh38}
## Notes: run liftOver from 19->38; use hacked bed format to simplify things
$(LD_CHR_GRCh38)%.lifted.bed: $(LD_CHR_GRCh38)%.input.bed | $$(dir $$@)
	$(LIFTOVER_EXECUTABLE) $< $(LIFTOVER_19_TO_38) $@ $(subst .bed,$(TRACKING_FAIL_SUFFIX),$@)

## patterns:
##    output: {ldsc_data_GRCh38}/{CHR}.input.bed
##    input:  {ldsc_data_GRCh37}/{CHR}.l2.ldscore.gz
##    input:  {ldsc_data_GRCh38}
## Notes: take old build ldsc data and convert it to hacked bed format for liftOver
$(LD_CHR_GRCh38)%.input.bed: $$(subst $$(LD_CHR_GRCh38),$$(LD_CHR),$$(subst .input.bed,.l2.ldscore.gz,$$@)) | $$(dir $$@)
	gunzip -c $< | awk 'NR > 1 {print "chr"$$1"\t"$$3-1"\t"$$3"\t"$$2":"$$5":"$$6}' > $@

## patterns:
##    output: {ldsc_data_GRCh38}
## Notes: make GRCh38 ldsc directory tree if needed
$(sort $(dir $(LD_TARGETS))):
	mkdir -p $@
