## Lightning Auriga, 19 May 2020
## Run fastGWA

include $(PROJECT_BASE_DIR)/Makefile.config

GENOTYPE_DIR := $(CLEANED_CHIP_OUTPUT_DIR)
IMPUTED_DIR := $(BGEN_OUTPUT_DIR)

RESULTS_DIR := $(RESULT_OUTPUT_DIR)
CONFIG_DIR := $(CONFIG_INPUT_DIR)
ANALYSIS_CONFIGS := $(shell ls $(CONFIG_DIR)/*config.yaml)
## empirical approximate minimum subject count, specific to fastGWA
MINIMUM_VALID_SUBJECT_COUNT := $(FASTGWA_MINIMUM_VALID_SUBJECT_COUNT)
## construct analysis targets for all config entries that request fastGWA
ANALYSIS_RESULTS_FASTGWA := $(foreach config,$(ANALYSIS_CONFIGS),$(shell $(INITIALIZE_OUTPUT_DIRECTORIES) -e $(EXTENSION_CONFIG) -p $(config) -D $(PHENOTYPE_FILENAME) -I plco_id -b $(IMPUTED_DIR) -r $(RESULTS_DIR) -s fastgwa -N $(MINIMUM_VALID_SUBJECT_COUNT) $(if $(findstring B,$(firstword -$(MAKEFLAGS))),-B,)))

.SECONDEXPANSION:
.SECONDARY:
.DELETE_ON_ERROR:
.PHONY: all $(ANALYSIS_RESULTS_FASTGWA) secondary-clean
all: $(ANALYSIS_RESULTS_FASTGWA)

$(ANALYSIS_RESULTS_FASTGWA): $$(addsuffix .tsv.gz$(TRACKING_SUCCESS_SUFFIX),$$@) | $$(dir $$@)

## get a saved config parameter setting from a tracking file
define get_tracked_parameter =
$(shell cat $(1))
endef

## get a set of config parameter settings as a comma-delimited list
define get_tracked_parameter_list =
$(shell cat $(1) | tr '\n' ' ' | sed 's/ /,/g ; s/\t/,/g' | sed 's/,$$//')
endef

## model matrix handling for association pipelines
define check_model_matrix =
"$(strip $(shell wc -l $(1) | awk '{print $$1}'))" -gt "$(2)" ]] && [[ "$(strip $(shell awk 'NR > 1 && $$3 != 0 && $$3 != 1' $(1) | wc -l))" -gt "0" || "$(strip $(shell awk 'NR > 1 && $$3 == 1' $(1) | wc -l))" -gt "$(3)"
endef


## patterns:
##    output: results/{PHENOTYPE}/{ANCESTRY}/{METHOD}/{PHENOTYPE}.{CHIP}.fastgwa.tsv.gz$(TRACKING_SUCCESS_SUFFIX)
##    input:  results/{PHENOTYPE}/{ANCESTRY}/{METHOD}/{PHENOTYPE}.{CHIP}.fastgwa.tsv$(TRACKING_SUCCESS_SUFFIX)
##    input:  results/{PHENOTYPE}/{ANCESTRY}/{METHOD}/{PHENOTYPE}.{CHIP}.fastgwa.model_matrix$(TRACKING_SUCCESS_SUFFIX)
##    input:  results/{PHENOTYPE}/{ANCESTRY}/{METHOD}/
## Notes: gzip the genome-wide fastGWA results.
%.tsv.gz$(TRACKING_SUCCESS_SUFFIX): %.tsv$(TRACKING_SUCCESS_SUFFIX) %.model_matrix$(TRACKING_SUCCESS_SUFFIX) | $$(dir $$@)
	if [[ $(call check_model_matrix,$(subst $(TRACKING_SUCCESS_SUFFIX),,$(word 2,$^)),$(MINIMUM_VALID_SUBJECT_COUNT),$(MINIMUM_VALID_CASE_COUNT)) ]] ; then \
	$(call log_handler,$(subst $(TRACKING_SUCCESS_SUFFIX),,$@),gzip -c $(subst $(TRACKING_SUCCESS_SUFFIX),,$<) > $(subst $(TRACKING_SUCCESS_SUFFIX),,$@)) ; \
	else \
	rm -f $(subst $(TRACKING_SUCCESS_SUFFIX),$(TRACKING_FAIL_SUFFIX),$@) && touch $@ ; \
	fi

## patterns:
##    output: results/{PHENOTYPE}/{ANCESTRY}/{METHOD}/{PHENOTYPE}.{CHIP}.fastgwa.tsv$(TRACKING_SUCCESS_SUFFIX)
##    input:  [rsid annotation software]
##            [chrpos to rsid linker file]
##            results/{PHENOTYPE}/{ANCESTRY}/{METHOD}/{PHENOTYPE}.{CHIP}.fastgwa.rawids.tsv$(TRACKING_SUCCESS_SUFFIX)
##            results/{PHENOTYPE}/{ANCESTRY}/{METHOD}/{PHENOTYPE}.{CHIP}.fastgwa$(ID_MODE_TRACKER_SUFFIX)
##            results/{PHENOTYPE}/{ANCESTRY}/{METHOD}/{PHENOTYPE}.{CHIP}.fastgwa.model_matrix$(TRACKING_SUCCESS_SUFFIX)
##            results/{PHENOTYPE}/{ANCESTRY}/{METHOD}/
## Notes: replace chr:pos:ref:alt style ids with rsids if requested
%.fastgwa.tsv$(TRACKING_SUCCESS_SUFFIX): $(ANNOTATE_RSID) $(RSID_LINKER_FILE) %.fastgwa.rawids.tsv$(TRACKING_SUCCESS_SUFFIX) %.fastgwa$(ID_MODE_TRACKER_SUFFIX) %.fastgwa.model_matrix$(TRACKING_SUCCESS_SUFFIX) | $$(dir $$@)
	$(eval ID_MODE := $(call get_tracker_parameter,$(word 4,$^)))
	if [[ $(call check_model_matrix,$(subst $(TRACKING_SUCCESS_SUFFIX),,$(lastword $^)),$(MINIMUM_VALID_SUBJECT_COUNT),$(MINIMUM_VALID_CASE_COUNT)) ]] ; then \
	$(if $(filter $(CHRPOS_MODE),$(ID_MODE)),$(call log_handler,$(subst $(TRACKING_SUCCESS_SUFFIX),,$@),ln -fs $(subst $(TRACKING_SUCCESS_SUFFIX),,$(word 3,$^)) $(subst $(TRACKING_SUCCESS_SUFFIX),,$@)),$(call qsub_handler,$(subst $(TRACKING_SUCCESS_SUFFIX),,$@),$< $(subst $(TRACKING_SUCCESS_SUFFIX),,$(word 3,$^)) $(word 2,$^) $(subst $(TRACKING_SUCCESS_SUFFIX),,$@))) ; \
	else \
	rm -f $(subst $(TRACKING_SUCCESS_SUFFIX),$(TRACKING_FAIL_SUFFIX),$@) && touch $@ ; \
	fi

## patterns:
##    output: results/{PHENOTYPE}/{ANCESTRY}/{METHOD}/{PHENOTYPE}.{CHIP}.fastgwa.rawids.tsv$(TRACKING_SUCCESS_SUFFIX)
##    input:  [frequency annotation software]
##            [frequency annotation data]
##            results/{PHENOTYPE}/{ANCESTRY}/{METHOD}/{PHENOTYPE}.{CHIP}.fastgwa.nofreq.tsv$(TRACKING_SUCCESS_SUFFIX)
##            results/{PHENOTYPE}/{ANCESTRY}/{METHOD}/{PHENOTYPE}.{CHIP}.fastgwa$(FREQUENCY_MODE_TRACKER_SUFFIX)
##            results/{PHENOTYPE}/{ANCESTRY}/{METHOD}/{PHENOTYPE}.{CHIP}.fastgwa.model_matrix$(TRACKING_SUCCESS_SUFFIX)
##            results/{PHENOTYPE}/{ANCESTRY}/{METHOD}/
## Notes: add frequency data to a results file
%.fastgwa.rawids.tsv$(TRACKING_SUCCESS_SUFFIX): $(ANNOTATE_FREQUENCY) $(TOPMED_FREQUENCY_FILE) %.fastgwa.nofreq.tsv$(TRACKING_SUCCESS_SUFFIX) %.fastgwa$(FREQUENCY_MODE_TRACKER_SUFFIX) %.fastgwa.model_matrix$(TRACKING_SUCCESS_SUFFIX) | $$(dir $$@)
	$(eval SUBJECT_FREQUENCIES := $(call get_tracked_parameter,$(word 4,$^)))
	if [[ $(call check_model_matrix,$(subst $(TRACKING_SUCCESS_SUFFIX),,$(lastword $^)),$(MINIMUM_VALID_SUBJECT_COUNT),$(MINIMUM_VALID_CASE_COUNT)) ]] ; then \
	$(if $(filter $(SUBJECT_MODE),$(SUBJECT_FREQUENCIES)),$(call log_handler,$(subst $(TRACKING_SUCCESS_SUFFIX),,$@),ln -fs $(subst $(TRACKING_SUCCESS_SUFFIX),,$(word 3,$^)) $(subst $(TRACKING_SUCCESS_SUFFIX),,$@)),$(call qsub_handler,$(subst $(TRACKING_SUCCESS_SUFFIX),,$@),$< $(subst $(TRACKING_SUCCESS_SUFFIX),,$(word 3,$^)) $(word 2,$^) $(call resolve_ancestry,$(subst $(TRACKING_SUCCESS_SUFFIX),,$@)) $(subst $(TRACKING_SUCCESS_SUFFIX),,$@))) ; \
	else \
	rm -f $(subst $(TRACKING_SUCCESS_SUFFIX),$(TRACKING_FAIL_SUFFIX),$@) && touch $@ ; \
	fi

## patterns:
##    output: results/{PHENOTYPE}/{ANCESTRY}/{METHOD}/{PHENOTYPE}.{CHIP}.fastgwa.nofreq.tsv$(TRACKING_SUCCESS_SUFFIX)
##    input:  results/{PHENOTYPE}/{ANCESTRY}/{METHOD}/{PHENOTYPE}.{CHIP}.chr{CHR}.fastgwa$(TRACKING_SUCCESS_SUFFIX)
##            results/{PHENOTYPE}/{ANCESTRY}/{METHOD}/{PHENOTYPE}.{CHIP}.fastgwa$(FREQUENCY_MODE_TRACKER_SUFFIX)
##            results/{PHENOTYPE}/{ANCESTRY}/{METHOD}/{PHENOTYPE}.{CHIP}.fastgwa.model_matrix$(TRACKING_SUCCESS_SUFFIX)
##            results/{PHENOTYPE}/{ANCESTRY}/{METHOD}/
## Notes: combine results from per-chromosome fastGWA runs into a single genome-wide file, suitable for meta-analysis.
## the model matrix is only required here to enforce a preflight sample size check. frequency is set to NA at this step
## and requires a separate processing step
%.fastgwa.nofreq.tsv$(TRACKING_SUCCESS_SUFFIX): $$(foreach chr,$$(CHRS),%.chr$$(chr).fastgwa$(TRACKING_SUCCESS_SUFFIX)) %.fastgwa$(FREQUENCY_MODE_TRACKER_SUFFIX) %.fastgwa.model_matrix$(TRACKING_SUCCESS_SUFFIX) | $$(dir $$@)
	$(eval SUBJECT_FREQUENCIES := $(call get_tracked_parameter,$(filter %$(FREQUENCY_MODE_TRACKER_SUFFIX),$^)))
	if [[ $(call check_model_matrix,$(subst $(TRACKING_SUCCESS_SUFFIX),,$(lastword $^)),$(MINIMUM_VALID_SUBJECT_COUNT),$(MINIMUM_VALID_CASE_COUNT)) ]] ; then \
	$(call log_handler,$(subst $(TRACKING_SUCCESS_SUFFIX),,$@),cat $(filter-out %.model_matrix$(TRACKING_SUCCESS_SUFFIX) %$(FREQUENCY_MODE_TRACKER_SUFFIX),$(subst .fastgwa$(TRACKING_SUCCESS_SUFFIX),.fastGWA,$^)) | awk '! /CHR/' | awk 'NR == 1 {print "CHR\tPOS\tSNP\tTested_Allele\tOther_Allele\tFreq_Tested_Allele_in_TOPMed\tBETA\tSE\tP\tN"} ; {print $$1"\t"$$3"\t"$$2"\t"$$4"\t"$$5"\t$(if $(filter $(SUBJECT_MODE),$(SUBJECT_FREQUENCIES)),"$$7",NA)\t"$$8"\t"$$9"\t"$$10"\t"$$6}' > $(subst $(TRACKING_SUCCESS_SUFFIX),,$@)) ; \
	else \
	rm -f $(subst $(TRACKING_SUCCESS_SUFFIX),$(TRACKING_FAIL_SUFFIX),$@) && touch $@ ; \
	fi




## utility function to grab {CHIP} out of results/{PHENOTYPE}/{ANCESTRY}/{METHOD}/{PHENOTYPE}.{CHIP}.chr{CHR}.{whatever}
define extract_chip =
$(firstword $(subst _,$(2),$(lastword $(subst ., ,$(word 1,$(subst .chr, ,$(1)))))))
endef

## utility function to grab {ANCESTRY} out of results/{PHENOTYPE}/{ANCESTRY}/{METHOD}/{PHENOTYPE}.{CHIP}.chr{CHR}.{whatever}
define extract_ancestry =
$(word 2,$(subst /, ,$(subst $(RESULTS_DIR),,$(1))))
endef

## patterns:
##    output: results/{PHENOTYPE}/{ANCESTRY}/{METHOD}/{PHENOTYPE}.{CHIP}.chr{CHR}.fastgwa$(TRACKING_SUCCESS_SUFFIX)
##    input:  fastgwa-grm/{ANCESTRY}/{CHIP}-sp.grm.sp
##            bgen/{CHIP}/{ANCESTRY}/chr{CHR}-filtered.bgen
##            bgen/{CHIP}/{ANCESTRY}/chr{CHR}-filtered-noNAs.sample
##            results/{PHENOTYPE}/{ANCESTRY}/{METHOD}/{PHENOTYPE}.{CHIP}.fastgwa.phenotype$(TRACKING_SUCCESS_SUFFIX)
##            results/{PHENOTYPE}/{ANCESTRY}/{METHOD}/{PHENOTYPE}.{CHIP}.fastgwa.covariates$(TRACKING_SUCCESS_SUFFIX)
##            results/{PHENOTYPE}/{ANCESTRY}/{METHOD}/{PHENOTYPE}.{CHIP}.fastgwa.model_matrix$(TRACKING_SUCCESS_SUFFIX)
##            results/{PHENOTYPE}/{ANCESTRY}/{METHOD}/
## Notes: run fastGWA itself, on precomputed GRM from the separate pipeline. all covariates are handled as quantitative, categoricals are binarized.
## this is a step that requires the "noNA" modification to sample files in the bgen pipeline. the model matrix is used to enforce minimum sample size requirements
## on a per-method basis.
$(foreach result,$(ANALYSIS_RESULTS_FASTGWA),$(patsubst %,$(subst .fastgwa,,$(result)).chr%.fastgwa$(TRACKING_SUCCESS_SUFFIX),$(CHRS))): $$(FASTGWA_GRM_OUTPUT_DIR)/$$(call extract_ancestry,$$@)/$$(call extract_chip,$$@, )-sp.grm.sp $$(IMPUTED_DIR)/$$(call extract_chip,$$@,/)/$$(call extract_ancestry,$$@)/$$(lastword $$(subst .chr, chr,$$(subst .fastgwa$(TRACKING_SUCCESS_SUFFIX),,$$@)))-filtered.bgen $$(IMPUTED_DIR)/$$(call extract_chip,$$@,/)/$$(call extract_ancestry,$$@)/$$(lastword $$(subst .chr, chr,$$(subst .fastgwa$(TRACKING_SUCCESS_SUFFIX),,$$@)))-filtered-noNAs.sample $$(word 1,$$(subst .chr, ,$$@)).fastgwa.phenotype$(TRACKING_SUCCESS_SUFFIX) $$(word 1,$$(subst .chr, ,$$@)).fastgwa.covariates$(TRACKING_SUCCESS_SUFFIX) $$(word 1,$$(subst .chr, ,$$@)).fastgwa.model_matrix$(TRACKING_SUCCESS_SUFFIX)
	if [[ $(call check_model_matrix,$(subst $(TRACKING_SUCCESS_SUFFIX),,$(lastword $^)),$(MINIMUM_VALID_SUBJECT_COUNT),$(MINIMUM_VALID_CASE_COUNT)) ]] ; then \
	$(call qsub_handler_specify_queue_time,$(subst $(TRACKING_SUCCESS_SUFFIX),,$@),$(GCTA) --bgen $(word 2,$^) --sample $(word 3,$^) --fastGWA-mlm --grm-sparse $(subst -sp.grm.sp,-sp,$<) --pheno $(subst $(TRACKING_SUCCESS_SUFFIX),,$(word 4,$^)) $(if $(shell head -1 $(subst $(TRACKING_SUCCESS_SUFFIX),,$(word 5,$^)) | cut -f 1-2 --complement),--qcovar $(subst $(TRACKING_SUCCESS_SUFFIX),,$(word 5,$^)),) --threads 4 --out $(subst .fastgwa$(TRACKING_SUCCESS_SUFFIX),,$@) > $(subst $(TRACKING_SUCCESS_SUFFIX),.log,$@),all.q,1:00:00) ; \
	else \
	rm -f $(subst $(TRACKING_SUCCESS_SUFFIX),$(TRACKING_FAIL_SUFFIX),$@) && touch $@ ; \
	fi

## patterns:
##    output: results/{PHENOTYPE}/{ANCESTRY}/{METHOD}/{PHENOTYPE}.{CHIP}.fastgwa.samples$(TRACKING_SUCCESS_SUFFIX)
##    input:  bgen/{CHIP}/{ANCESTRY}/chr22-filtered-noNAs.sample
##            results/{PHENOTYPE}/{ANCESTRY}/{METHOD}/
## Notes: this is just a list of included subject ids. this is mostly a step for compatibility with code shared by the other methods.
%.fastgwa.samples$(TRACKING_SUCCESS_SUFFIX): $$(IMPUTED_DIR)/$$(call extract_chip,$$(subst .fastgwa.samples,,$$(subst $(TRACKING_SUCCESS_SUFFIX),,$$@)),/)/$$(call extract_ancestry,$$(subst $(TRACKING_SUCCESS_SUFFIX),,$$@))/chr22-filtered-noNAs.sample | $$(dir $$@)
	$(call log_handler,$(subst $(TRACKING_SUCCESS_SUFFIX),,$@),awk 'NR > 2 {print $$1"_"$$1}' $(subst $(TRACKING_SUCCESS_SUFFIX),,$<) > $(subst $(TRACKING_SUCCESS_SUFFIX),,$@))

## patterns:
##    output: results/{PHENOTYPE}/{ANCESTRY}/{METHOD}/{PHENOTYPE}.{CHIP}.fastgwa.phenotype$(TRACKING_SUCCESS_SUFFIX)
##    input:  results/{PHENOTYPE}/{ANCESTRY}/{METHOD}/{PHENOTYPE}.{CHIP}.fastgwa.model_matrix$(TRACKING_SUCCESS_SUFFIX)
## Notes: cut just the IDs and phenotype out of the model matrix and dump them in their own file.
%.fastgwa.phenotype$(TRACKING_SUCCESS_SUFFIX): %.fastgwa.model_matrix$(TRACKING_SUCCESS_SUFFIX) | $$(dir $$@)
	$(call log_handler,$(subst $(TRACKING_SUCCESS_SUFFIX),,$@),cut -f 1-3 $(subst $(TRACKING_SUCCESS_SUFFIX),,$<) > $(subst $(TRACKING_SUCCESS_SUFFIX),,$@))

## patterns:
##    output: results/{PHENOTYPE}/{ANCESTRY}/{METHOD}/{PHENOTYPE}.{CHIP}.fastgwa.covariates$(TRACKING_SUCCESS_SUFFIX)
##    input:  results/{PHENOTYPE}/{ANCESTRY}/{METHOD}/{PHENOTYPE}.{CHIP}.fastgwa.model_matrix$(TRACKING_SUCCESS_SUFFIX)
## Notes: cut just the IDs and covariates out of the model matrix and dump them in their own file.
%.fastgwa.covariates$(TRACKING_SUCCESS_SUFFIX): %.fastgwa.model_matrix$(TRACKING_SUCCESS_SUFFIX) | $$(dir $$@)
	$(call log_handler,$(subst $(TRACKING_SUCCESS_SUFFIX),,$@),cut -f 3 --complement $(subst $(TRACKING_SUCCESS_SUFFIX),,$<) > $(subst $(TRACKING_SUCCESS_SUFFIX),,$@))


## patterns:
##    output: results/{PHENOTYPE}/{ANCESTRY}/{METHOD}/{PHENOTYPE}.{CHIP}.fastgwa.model_matrix$(TRACKING_SUCCESS_SUFFIX)
##    input:  results/{PHENOTYPE}/{ANCESTRY}/{METHOD}/{PHENOTYPE}.{CHIP}.fastgwa$(PHENOTYPE_DATASET_TRACKER_SUFFIX)
##    input:  results/{PHENOTYPE}/{ANCESTRY}/{METHOD}/{PHENOTYPE}.{CHIP}.fastgwa$(PHENOTYPE_NAME_TRACKER_SUFFIX)
##    input:  results/{PHENOTYPE}/{ANCESTRY}/{METHOD}/{PHENOTYPE}.{CHIP}.fastgwa$(COVARIATE_NAME_TRACKER_SUFFIX)
##    input:  results/{PHENOTYPE}/{ANCESTRY}/{METHOD}/{PHENOTYPE}.{CHIP}.fastgwa$(TRANSFORMATION_TRACKER_SUFFIX)
##    input:  results/{PHENOTYPE}/{ANCESTRY}/{METHOD}/{PHENOTYPE}.{CHIP}.fastgwa$(SEX_SPECIFIC_TRACKER_SUFFIX)
##    input:  results/{PHENOTYPE}/{ANCESTRY}/{METHOD}/{PHENOTYPE}.{CHIP}.fastgwa$(CONTROL_INCLUSION_TRACKER_SUFFIX)
##    input:  results/{PHENOTYPE}/{ANCESTRY}/{METHOD}/{PHENOTYPE}.{CHIP}.fastgwa$(CONTROL_EXCLUSION_TRACKER_SUFFIX)
##    input:  results/{PHENOTYPE}/{ANCESTRY}/{METHOD}/{PHENOTYPE}.{CHIP}.fastgwa.samples$(TRACKING_SUCCESS_SUFFIX)
##    input:  results/{PHENOTYPE}/{ANCESTRY}/{METHOD}/
## Notes: build a model matrix containing phenotype and covariate data for all relevant subjects. for truly esoteric reasons
## this is separately submitted to the cluster. Direct config file dependency has been removed to prevent
## repeated reruns due to version control, unrelated database updates, and other trivial issues.
%.fastgwa.model_matrix$(TRACKING_SUCCESS_SUFFIX): %.fastgwa$(PHENOTYPE_DATASET_TRACKER_SUFFIX) %.fastgwa$(PHENOTYPE_NAME_TRACKER_SUFFIX) %.fastgwa$(COVARIATE_NAME_TRACKER_SUFFIX) %.fastgwa$(TRANSFORMATION_TRACKER_SUFFIX) %.fastgwa$(SEX_SPECIFIC_TRACKER_SUFFIX) %.fastgwa$(CONTROL_INCLUSION_TRACKER_SUFFIX) %.fastgwa$(CONTROL_EXCLUSION_TRACKER_SUFFIX) %.fastgwa.samples$(TRACKING_SUCCESS_SUFFIX) | $$(dir $$@)
	$(call qsub_handler,$(subst $(TRACKING_SUCCESS_SUFFIX),,$@),Rscript $(SHARED_SOURCE)/construct_model_matrix.R $(PHENOTYPE_FILENAME) $(subst $(TRACKING_SUCCESS_SUFFIX),,$(lastword $^)) $(word 2,$(subst /, ,$(subst $(RESULTS_DIR),,$@))) $(lastword $(subst ., ,$(subst .fastgwa.model_matrix$(TRACKING_SUCCESS_SUFFIX),,$@))) $(call get_tracked_parameter,$(word 2,$^)) $(call get_tracked_parameter,$(word 3,$^)) $(subst $(TRACKING_SUCCESS_SUFFIX),,$@) NA $(call get_tracked_parameter,$(word 4,$^)) $(call get_tracked_parameter,$(word 5,$^)) $(word 6,$^) $(word 7,$^))

## patterns:
##    output: results/{PHENOTYPE}/{ANCESTRY}/{METHOD}/
## Notes: build the output directory tree if needed.
$(sort $(dir $(ANALYSIS_RESULTS_FASTGWA))):
	mkdir -p $@

## phony target for removing intermediate files. Somewhat dangerous but extremely helpful for disk usage
secondary-clean:
	for analysis in $(ANALYSIS_RESULTS_FASTGWA) ; \
	do \
	touch $$analysis$(FINALIZATION_TRACKER_SUFFIX) ; \
	done
	for dir in $(dir $(ANALYSIS_RESULTS_FASTGWA)) ; \
	do \
	rm -f $$dir/*fastGWA ; \
	rm -f $$dir/*plot_ready ; \
	rm -f $$dir/*tsv ; \
	done
