## Lightning Auriga, 29 May 2020
## Run plink on chips

include $(PROJECT_BASE_DIR)/Makefile.config

GENOTYPE_DIR := $(CLEANED_CHIP_OUTPUT_DIR)
IMPUTED_DIR := $(BGEN_OUTPUT_DIR)
RESULTS_DIR := $(RESULT_OUTPUT_DIR)
CONFIG_DIR := $(CONFIG_INPUT_DIR)

ANALYSIS_CONFIGS := $(shell ls $(CONFIG_DIR)/*config.yaml)
## empirical approximate minimum subject count, specific to fastGWA
MINIMUM_VALID_SUBJECT_COUNT := $(PLINK_MINIMUM_VALID_SUBJECT_COUNT)
## construct analysis targets for all config entries that request fastGWA
ANALYSIS_RESULTS_PLINK := $(addprefix $(RESULTS_DIR)/,$(foreach config,$(ANALYSIS_CONFIGS),$(shell $(SHARED_SOURCE)/construct_output_filenames.bash $(config) plink $(MINIMUM_VALID_SUBJECT_COUNT) $(IMPUTED_DIR) $(RESULTS_DIR) $(PHENOTYPE_FILENAME) $(SHARED_SOURCE)/extract_columns.bash $(PHENOTYPE_DATASET_TRACKER_SUFFIX) $(FREQUENCY_MODE_TRACKER_SUFFIX) $(ID_MODE_TRACKER_SUFFIX) $(PHENOTYPE_NAME_TRACKER_SUFFIX) $(COVARIATE_NAME_TRACKER_SUFFIX) NA $(TRANSFORMATION_TRACKER_SUFFIX) $(SEX_SPECIFIC_TRACKER_SUFFIX) $(FINALIZATION_TRACKER_SUFFIX) $(if $(findstring B,$(firstword -$(MAKEFLAGS))),1,0) $(if $(findstring n,$(firstword -$(MAKEFLAGS))),1,0))))

ANALYSIS_RESULTS_PLINK_TRUNCATED := $(subst .assoc.logistic,,$(subst .assoc.linear,,$(ANALYSIS_RESULTS_PLINK)))

.SECONDEXPANSION:
.SECONDARY:
.DELETE_ON_ERROR:
.PHONY: all $(ANALYSIS_RESULTS_PLINK_TRUNCATED) secondary-clean
all: $(ANALYSIS_RESULTS_PLINK_TRUNCATED)

$(ANALYSIS_RESULTS_PLINK_TRUNCATED): $$(addsuffix .tsv.gz,$$@) | $$(dir $$@)


## get a saved config parameter setting from a tracking file
define get_tracked_parameter =
$(shell cat $(1))
endef

## model matrix handling for association pipelines
define check_model_matrix =
"$(strip $(shell wc -l $(1) | awk '{print $$1}'))" -gt "$(2)" ]] && [[ "$(strip $(shell awk 'NR > 1 && $$3 != 0 && $$3 != 1' $(1) | wc -l))" -gt "0" || "$(strip $(shell awk 'NR > 1 && $$3 == 1' $(1) | wc -l))" -gt "$(3)"
endef



## patterns:
##    output: results/{PHENOTYPE}/{ANCESTRY}/{METHOD}/{PHENOTYPE}.{CHIP}.PLINK.tsv.gz
##    input:  results/{PHENOTYPE}/{ANCESTRY}/{METHOD}/{PHENOTYPE}.{CHIP}.PLINK.tsv
##    input:  results/{PHENOTYPE}/{ANCESTRY}/{METHOD}/{PHENOTYPE}.{CHIP}.plink.model_matrix$(TRACKING_SUCCESS_SUFFIX)
##    input:  results/{PHENOTYPE}/{ANCESTRY}/{METHOD}/
## Notes: gzip the genome-wide plink association results.
## the model matrix is only required here to enforce a preflight sample size check.
%.tsv.gz: %.tsv %.model_matrix$(TRACKING_SUCCESS_SUFFIX) | $$(dir $$@)
	if [[ $(call check_model_matrix,$(subst $(TRACKING_SUCCESS_SUFFIX),,$(lastword $^)),$(MINIMUM_VALID_SUBJECT_COUNT),$(MINIMUM_VALID_CASE_COUNT)) ]] ; then \
	gzip -c $< > $@ ; \
	fi

## patterns:
##    output: results/{PHENOTYPE}/{ANCESTRY}/{METHOD}/{PHENOTYPE}.{CHIP}.plink.tsv
##    input:  [rsid annotation software]
##            [chrpos to rsid linker file]
##            results/{PHENOTYPE}/{ANCESTRY}/{METHOD}/{PHENOTYPE}.{CHIP}.plink.rawids.tsv
##            results/{PHENOTYPE}/{ANCESTRY}/{METHOD}/{PHENOTYPE}.{CHIP}.plink$(ID_MODE_TRACKER_SUFFIX)
##            results/{PHENOTYPE}/{ANCESTRY}/{METHOD}/{PHENOTYPE}.{CHIP}.plink.model_matrix$(TRACKING_SUCCESS_SUFFIX)
##            results/{PHENOTYPE}/{ANCESTRY}/{METHOD}/
## Notes: replace chr:pos:ref:alt style ids with rsids if requested
%.plink.tsv: $(ANNOTATE_RSID) $(RSID_LINKER_FILE) %.plink.rawids.tsv %.plink$(ID_MODE_TRACKER_SUFFIX) %.plink.model_matrix$(TRACKING_SUCCESS_SUFFIX) | $$(dir $$@)
	$(eval ID_MODE := $(call get_tracker_parameter,$(word 4,$^)))
	if [[ $(call check_model_matrix,$(subst $(TRACKING_SUCCESS_SUFFIX),,$(lastword $^)),$(MINIMUM_VALID_SUBJECT_COUNT),$(MINIMUM_VALID_CASE_COUNT)) ]] ; then \
	$(if $(filter $(CHRPOS_MODE),$(ID_MODE)),ln -fs $(word 3,$^) $@,$< $(word 3,$^) $(word 2,$^) $@) ; \
	fi

## patterns:
##    output: results/{PHENOTYPE}/{ANCESTRY}/{METHOD}/{PHENOTYPE}.{CHIP}.plink.rawids.tsv
##    input:  [frequency annotation software]
##            [frequency annotation data]
##            results/{PHENOTYPE}/{ANCESTRY}/{METHOD}/{PHENOTYPE}.{CHIP}.plink.nofreq.tsv
##            results/{PHENOTYPE}/{ANCESTRY}/{METHOD}/{PHENOTYPE}.{CHIP}.plink$(FREQUENCY_MODE_TRACKER_SUFFIX)
##            results/{PHENOTYPE}/{ANCESTRY}/{METHOD}/{PHENOTYPE}.{CHIP}.plink.model_matrix$(TRACKING_SUCCESS_SUFFIX)
##            results/{PHENOTYPE}/{ANCESTRY}/{METHOD}/{PHENOTYPE}.{CHIP}.plink.frequencies.frq$(TRACKING_SUCCESS_SUFFIX)
##            results/{PHENOTYPE}/{ANCESTRY}/{METHOD}/
## Notes: add frequency data to a results file
%.plink.rawids.tsv: $(ANNOTATE_FREQUENCY) $(TOPMED_FREQUENCY_FILE) %.plink.nofreq.tsv %.plink$(FREQUENCY_MODE_TRACKER_SUFFIX) %.plink.model_matrix$(TRACKING_SUCCESS_SUFFIX) %.plink.frequencies.frq$(TRACKING_SUCCESS_SUFFIX) | $$(dir $$@)
	$(eval SUBJECT_FREQUENCIES := $(call get_tracked_parameter,$(word 4,$^)))
	if [[ $(call check_model_matrix,$(subst $(TRACKING_SUCCESS_SUFFIX),,$(lastword $^)),$(MINIMUM_VALID_SUBJECT_COUNT),$(MINIMUM_VALID_CASE_COUNT)) ]] ; then \
	$(if $(filter $(SUBJECT_MODE),$(SUBJECT_FREQUENCIES)),join -1 3 -2 2 $(word 3,$^) $(word 6,$^) | awk 'NR > 1 {$$6 = $$15} ; {print $$1"\t"$$2"\t"$$3"\t"$$4"\t"$$5"\t"$$6"\t"$$7"\t"$$8"\t"$$9"\t"$$10}' > $@,$< $(word 3,$^) $(word 2,$^) $(call resolve_ancestry,$@) $@) ; \
	fi


## patterns:
##    output: results/{PHENOTYPE}/{ANCESTRY}/{METHOD}/{PHENOTYPE}.{CHIP}.plink.nofreq.tsv
##    input:  results/{PHENOTYPE}/{ANCESTRY}/{METHOD}/{PHENOTYPE}.{CHIP}.plink.assoc.logistic$(TRACKING_SUCCESS_SUFFIX)
##    input:  results/{PHENOTYPE}/{ANCESTRY}/{METHOD}/{PHENOTYPE}.{CHIP}.plink.model_matrix$(TRACKING_SUCCESS_SUFFIX)
##    input:  results/{PHENOTYPE}/{ANCESTRY}/{METHOD}/
## Notes: convert raw plink .assoc.logistic results into standard output format, converting OR
$(subst .assoc.logistic,.nofreq.tsv,$(filter %.assoc.logistic,$(ANALYSIS_RESULTS_PLINK))): $$(subst .nofreq.tsv,.assoc.logistic$(TRACKING_SUCCESS_SUFFIX),$$@) $$(subst .nofreq.tsv,.model_matrix$(TRACKING_SUCCESS_SUFFIX),$$@) | $$(dir $$@)
	if [[ $(call check_model_matrix,$(subst $(TRACKING_SUCCESS_SUFFIX),,$(lastword $^)),$(MINIMUM_VALID_SUBJECT_COUNT),$(MINIMUM_VALID_CASE_COUNT)) ]] ; then \
	awk 'NR == 1 {print "CHR\tPOS\tSNP\tTested_Allele\tOther_Allele\tFreq_Tested_Allele_in_TOPMed\tBETA\tSE\tP\tN"} ; NR > 1 && $$5 == "ADD" && $$7 != "NA" && $$8 != "0" {print $$1"\t"$$3"\t"$$2"\t"$$4"\tNA\tNA\t"log($$7)/log(10)"\t"(log($$7)/log(10)/$$8)"\t"$$9"\t"$$6}' $(subst $(TRACKING_SUCCESS_SUFFIX),,$<) > $@ ; \
	fi

## patterns:
##    output: results/{PHENOTYPE}/{ANCESTRY}/{METHOD}/{PHENOTYPE}.{CHIP}.plink.nofreq.tsv
##    input:  results/{PHENOTYPE}/{ANCESTRY}/{METHOD}/{PHENOTYPE}.{CHIP}.plink.assoc.linear$(TRACKING_SUCCESS_SUFFIX)
##    input:  results/{PHENOTYPE}/{ANCESTRY}/{METHOD}/{PHENOTYPE}.{CHIP}.plink.model_matrix$(TRACKING_SUCCESS_SUFFIX)
##    input:  results/{PHENOTYPE}/{ANCESTRY}/{METHOD}/
## Notes: convert raw plink .assoc.linear results into standard output format
$(subst .assoc.linear,.nofreq.tsv,$(filter %.assoc.linear,$(ANALYSIS_RESULTS_PLINK))): $$(subst .nofreq.tsv,.assoc.linear$(TRACKING_SUCCESS_SUFFIX),$$@) $$(subst .nofreq.tsv,.model_matrix$(TRACKING_SUCCESS_SUFFIX),$$@) | $$(dir $$@)
	if [[ $(call check_model_matrix,$(subst $(TRACKING_SUCCESS_SUFFIX),,$(lastword $^)),$(MINIMUM_VALID_SUBJECT_COUNT),$(MINIMUM_VALID_CASE_COUNT)) ]] ; then \
	awk 'NR == 1 {print "CHR\tPOS\tSNP\tTested_Allele\tOther_Allele\tFreq_Tested_Allele_in_TOPMed\tBETA\tSE\tP\tN"} ; NR > 1 && $$5 == "ADD" && $$7 != "NA" && $$8 != "0" {print $$1"\t"$$3"\t"$$2"\t"$$4"\tNA\tNA\t"$$7"\t"($$7/$$8)"\t"$$9"\t"$$6}' $(subst $(TRACKING_SUCCESS_SUFFIX),,$<) > $@ ; \
	fi

## utility function to grab {CHIP} out of results/{PHENOTYPE}/{ANCESTRY}/{METHOD}/{PHENOTYPE}.{CHIP}.plink.assoc.{whatever}
define extract_chip =
$(firstword $(subst _, ,$(lastword $(subst ., ,$(word 1,$(subst .plink, ,$(1)))))))
endef

## utility function to grab {ANCESTRY} out of results/{PHENOTYPE}/{ANCESTRY}/{METHOD}/{PHENOTYPE}.{CHIP}.chr{CHR}.{whatever}
define extract_ancestry =
$(word 2,$(subst /, ,$(subst $(RESULTS_DIR),,$(1))))
endef

## patterns:
##    output: results/{PHENOTYPE}/{ANCESTRY}/{METHOD}/{PHENOTYPE}.{CHIP}.plink.assoc.{MODEL_TYPE}$(TRACKING_SUCCESS_SUFFIX)
##    input:  {CLEANED_CHIPS}/{ANCESTRY}/{CHIP}.nohet.autosomes.bed
##            results/{PHENOTYPE}/{ANCESTRY}/{METHOD}/{PHENOTYPE}.{CHIP}.plink.model_matrix$(TRACKING_SUCCESS_SUFFIX)
##            results/{PHENOTYPE}/{ANCESTRY}/{METHOD}/{PHENOTYPE}.{CHIP}.plink.phenotype
##            results/{PHENOTYPE}/{ANCESTRY}/{METHOD}/{PHENOTYPE}.{CHIP}.plink.covariates
##            results/{PHENOTYPE}/{ANCESTRY}/{METHOD}/
## Notes: run PLINK association on chip data.
## the model matrix is only required here to enforce a preflight sample size check.
%.assoc.logistic$(TRACKING_SUCCESS_SUFFIX) %.assoc.linear$(TRACKING_SUCCESS_SUFFIX): $$(GENOTYPE_DIR)/$$(call extract_ancestry,$$@)/$$(call extract_chip,$$@,/).nohet.autosomes.bed %.model_matrix$(TRACKING_SUCCESS_SUFFIX) $$(subst $(TRACKING_SUCCESS_SUFFIX),.phenotype,$$@) $$(subst $(TRACKING_SUCCESS_SUFFIX),.covariates,$$@) | $$(dir $$@)
	if [[ $(call check_model_matrix,$(subst $(TRACKING_SUCCESS_SUFFIX),,$(word 2,$^)),$(MINIMUM_VALID_SUBJECT_COUNT),$(MINIMUM_VALID_CASE_COUNT)) ]] ; then \
	$(call qsub_handler,$(subst $(TRACKING_SUCCESS_SUFFIX),,$@),$(PLINK19) --bfile $(subst .bed,,$<) --pheno $(word 3,$^) $(if $(shell head -1 $(word 4,$^) | cut -f 1-2 --complement),--covar $(word 4,$^),) --allow-no-sex $(if $(filter %.assoc.linear$(TRACKING_SUCCESS_SUFFIX),$@),--linear,--logistic) --out $(firstword $(subst .plink.assoc., ,$@)).plink) ; \
	fi

## patterns:
##    output: results/{PHENOTYPE}/{ANCESTRY}/{METHOD}/{PHENOTYPE}.{CHIP}.plink.frequencies.frq$(TRACKING_SUCCESS_SUFFIX)
##    input:  {CLEANED_CHIPS}/{ANCESTRY}/{CHIP}.nohet.autosomes.bed
##    input:  results/{PHENOTYPE}/{ANCESTRY}/{METHOD}/
## Notes: plink association results do not include frequency data :( so generate frequency data from the chip
%.frequencies.frq$(TRACKING_SUCCESS_SUFFIX): $$(GENOTYPE_DIR)/$$(call extract_ancestry,$$@)/$$(call extract_chip,$$@,/).nohet.autosomes.bed | $$(dir $$@)
	$(call qsub_handler,$(subst $(TRACKING_SUCCESS_SUFFIX),,$@),$(PLINK19) --bfile $(subst .bed,,$<) --freq --out $(subst .frq$(TRACKING_SUCCESS_SUFFIX),,$@))

## patterns:
##    output: results/{PHENOTYPE}/{ANCESTRY}/{METHOD}/{PHENOTYPE}.{CHIP}.plink.samples
##    input:  bgen/{CHIP}/{ANCESTRY}/chr22-filtered-noNAs.sample
##            results/{PHENOTYPE}/{ANCESTRY}/{METHOD}/
## Notes: this is just a list of included subject ids. this is mostly a step for compatibility with code shared by the other methods.
%.plink.samples: $$(IMPUTED_DIR)/$$(subst GSA_,GSA/,$$(lastword $$(subst ., ,$$(subst .plink.samples,,$$@))))/$$(call extract_ancestry,$$@)/chr22-filtered-noNAs.sample | $$(dir $$@)
	awk 'NR > 2 {print $$1"_"$$1}' $< > $@

## utility function to just grab the name of a phenotype from config files with an analysis name {PHENOTYPE}.{CHIP}
define get_phenotype
$(shell $(SHARED_SOURCE)/construct_phenotype.bash $(firstword $(subst /, ,$(subst $(RESULTS_DIR), ,$(1)))) $(CONFIG_DIR))
endef

## utility function to just grab comma-delimited covariates from config files with an analysis name {PHENOTYPE}.{CHIP}
define get_covariates
$(shell $(SHARED_SOURCE)/construct_covariates.bash $(firstword $(subst /, ,$(subst $(RESULTS_DIR), ,$(1)))) $(CONFIG_DIR))
endef

## patterns:
##    output: results/{PHENOTYPE}/{ANCESTRY}/{METHOD}/{PHENOTYPE}.{CHIP}.plink.assoc.logistic.phenotype
##    input:  results/{PHENOTYPE}/{ANCESTRY}/{METHOD}/{PHENOTYPE}.{CHIP}.plink.model_matrix$(TRACKING_SUCCESS_SUFFIX)
## Notes: cut just the IDs and phenotype out of the model matrix and dump them in their own file.
%.assoc.logistic.phenotype: %.model_matrix$(TRACKING_SUCCESS_SUFFIX) | $$(dir $$@)
	cut -f 1-3 $(subst $(TRACKING_SUCCESS_SUFFIX),,$<) | awk '$$3 == 1 {$$3 = 2} ; $$3 == 0 {$$3 = 1} ; {print $$0}' > $@

## patterns:
##    output: results/{PHENOTYPE}/{ANCESTRY}/{METHOD}/{PHENOTYPE}.{CHIP}.plink.assoc.linear.phenotype
##    input:  results/{PHENOTYPE}/{ANCESTRY}/{METHOD}/{PHENOTYPE}.{CHIP}.plink.model_matrix$(TRACKING_SUCCESS_SUFFIX)
## Notes: cut just the IDs and phenotype out of the model matrix and dump them in their own file.
%.assoc.linear.phenotype: %.model_matrix$(TRACKING_SUCCESS_SUFFIX) | $$(dir $$@)
	cut -f 1-3 $(subst $(TRACKING_SUCCESS_SUFFIX),,$<) > $@

## patterns:
##    output: results/{PHENOTYPE}/{ANCESTRY}/{METHOD}/{PHENOTYPE}.{CHIP}.plink.assoc.{MODEL_TYPE}.covariates
##    input:  results/{PHENOTYPE}/{ANCESTRY}/{METHOD}/{PHENOTYPE}.{CHIP}.plink.model_matrix$(TRACKING_SUCCESS_SUFFIX)
## Notes: cut just the IDs and covariates out of the model matrix and dump them in their own file.
%.covariates: $$(firstword $$(subst .plink.assoc., ,$$@)).plink.model_matrix$(TRACKING_SUCCESS_SUFFIX) | $$(dir $$@)
	cut -f 3 --complement $(subst $(TRACKING_SUCCESS_SUFFIX),,$<) > $@

## patterns:
##    output: results/{PHENOTYPE}/{ANCESTRY}/{METHOD}/{PHENOTYPE}.{CHIP}.plink.model_matrix$(TRACKING_SUCCESS_SUFFIX)
##    input:  results/{PHENOTYPE}/{ANCESTRY}/{METHOD}/{PHENOTYPE}.{CHIP}.plink$(PHENOTYPE_DATASET_TRACKER_SUFFIX)
##    input:  results/{PHENOTYPE}/{ANCESTRY}/{METHOD}/{PHENOTYPE}.{CHIP}.plink$(PHENOTYPE_NAME_TRACKER_SUFFIX)
##    input:  results/{PHENOTYPE}/{ANCESTRY}/{METHOD}/{PHENOTYPE}.{CHIP}.plink$(COVARIATE_NAME_TRACKER_SUFFIX)
##    input:  results/{PHENOTYPE}/{ANCESTRY}/{METHOD}/{PHENOTYPE}.{CHIP}.plink$(CATEGORY_TRACKER_SUFFIX)
##    input:  results/{PHENOTYPE}/{ANCESTRY}/{METHOD}/{PHENOTYPE}.{CHIP}.plink$(SEX_SPECIFIC_TRACKER_SUFFIX)
##    input:  results/{PHENOTYPE}/{ANCESTRY}/{METHOD}/{PHENOTYPE}.{CHIP}.plink.samples
##    input:  results/{PHENOTYPE}/{ANCESTRY}/{METHOD}/
## Notes: build a model matrix containing phenotype and covariate data for all relevant subjects. for truly esoteric reasons
## this is separately submitted to the cluster. Direct config file dependency has been removed to prevent
## repeated reruns due to version control, unrelated database updates, and other trivial issues.
%.plink.model_matrix$(TRACKING_SUCCESS_SUFFIX): %.plink$(PHENOTYPE_DATASET_TRACKER_SUFFIX) %.plink$(PHENOTYPE_NAME_TRACKER_SUFFIX) %.plink$(COVARIATE_NAME_TRACKER_SUFFIX) %.plink$(CATEGORY_TRACKER_SUFFIX) %.plink$(SEX_SPECIFIC_TRACKER_SUFFIX) %.plink.samples | $$(dir $$@)
	$(call qsub_handler,$(subst $(TRACKING_SUCCESS_SUFFIX),,$@),Rscript $(SHARED_SOURCE)/construct_model_matrix.R $(PHENOTYPE_FILENAME) $(lastword $^) $(word 2,$(subst /, ,$(subst $(RESULTS_DIR),,$@))) $(lastword $(subst ., ,$(subst .saige.model_matrix$(TRACKING_SUCCESS_SUFFIX),,$@))) $(call get_tracked_parameter,$(word 2,$^)) $(call get_tracked_parameter,$(word 3,$^)) $(subst $(TRACKING_SUCCESS_SUFFIX),,$@) $(word 4,$^) none $(call get_tracked_parameter,$(word 5,$^)))

## patterns:
##    output: results/{PHENOTYPE}/{ANCESTRY}/{METHOD}/
## Notes: build the output directory tree if needed.
$(sort $(dir $(ANALYSIS_RESULTS_PLINK))):
	mkdir -p $@
