## Lightning Auriga, 22 May 2020
## workflow for BOLT-LMM analyses

include $(PROJECT_BASE_DIR)/Makefile.config

GENOTYPE_DIR := $(CLEANED_CHIP_OUTPUT_DIR)
IMPUTED_DIR := $(BGEN_OUTPUT_DIR)
LDSC_DIRECTORY := $(LDSC_OUTPUT_DIR)
RESULTS_DIR := $(RESULT_OUTPUT_DIR)
CONFIG_DIR := $(CONFIG_INPUT_DIR)
ANALYSIS_CONFIGS := $(shell ls $(CONFIG_DIR)/*config.yaml)
## empirical approximate minimum subject count, specific to BOLTLMM
MINIMUM_VALID_SUBJECT_COUNT := $(BOLTLMM_MINIMUM_VALID_SUBJECT_COUNT)
## construct analysis targets for all config entries that request BOLT
ANALYSIS_RESULTS_BOLTLMM := $(addprefix $(RESULTS_DIR)/,$(foreach config,$(ANALYSIS_CONFIGS),$(shell $(SHARED_SOURCE)/construct_output_filenames.bash $(config) boltlmm $(MINIMUM_VALID_SUBJECT_COUNT) $(IMPUTED_DIR) $(RESULTS_DIR) $(PHENOTYPE_FILENAME) $(SHARED_SOURCE)/extract_columns.bash $(PHENOTYPE_DATASET_TRACKER_SUFFIX) $(FREQUENCY_MODE_TRACKER_SUFFIX) $(ID_MODE_TRACKER_SUFFIX) $(PHENOTYPE_NAME_TRACKER_SUFFIX) $(COVARIATE_NAME_TRACKER_SUFFIX) NA $(TRANSFORMATION_TRACKER_SUFFIX) $(SEX_SPECIFIC_TRACKER_SUFFIX) $(CONTROL_INCLUSION_TRACKER_SUFFIX) $(CONTROL_EXCLUSION_TRACKER_SUFFIX) $(FINALIZATION_TRACKER_SUFFIX) $(if $(findstring B,$(firstword -$(MAKEFLAGS))),1,0) $(if $(findstring n,$(firstword -$(MAKEFLAGS))),1,0))))

.SECONDEXPANSION:
.SECONDARY:
.DELETE_ON_ERROR:
.PHONY: all $(ANALYSIS_RESULTS_BOLTLMM) secondary-clean
all: $(ANALYSIS_RESULTS_BOLTLMM)

$(ANALYSIS_RESULTS_BOLTLMM): $$(addsuffix .tsv.gz$(TRACKING_SUCCESS_SUFFIX),$$@) | $$(dir $$@)

## get a saved config parameter setting from a tracking file
define get_tracked_parameter =
$(shell cat $(1))
endef

## get a set of config parameter settings as a comma-delimited list
define get_tracked_parameter_list =
$(shell cat $(1) | tr '\n' ' ' | sed 's/ /,/g ; s/\t/,/g' | sed 's/,$$//')
endef

## model matrix handling for association pipelines
define check_model_matrix =
"$(strip $(shell wc -l $(1) | awk '{print $$1}'))" -gt "$(2)" ]] && [[ "$(strip $(shell awk 'NR > 1 && $$3 != 0 && $$3 != 1' $(1) | wc -l))" -gt "0" || "$(strip $(shell awk 'NR > 1 && $$3 == 1' $(1) | wc -l))" -gt "$(3)"
endef



## patterns:
##    output: results/{PHENOTYPE}/{ANCESTRY}/{METHOD}/{PHENOTYPE}.{CHIP}.boltlmm.tsv.gz$(TRACKING_SUCCESS_SUFFIX)
##    input:  results/{PHENOTYPE}/{ANCESTRY}/{METHOD}/{PHENOTYPE}.{CHIP}.boltlmm.tsv$(TRACKING_SUCCESS_SUFFIX)
##    input:  results/{PHENOTYPE}/{ANCESTRY}/{METHOD}/{PHENOTYPE}.{CHIP}.boltlmm.model_matrix$(TRACKING_SUCCESS_SUFFIX)
##    input:  results/{PHENOTYPE}/{ANCESTRY}/{METHOD}/
## Notes: gzip the genome-wide BOLTLMM results.
## the model matrix is only required here to enforce a preflight sample size check.
%.tsv.gz$(TRACKING_SUCCESS_SUFFIX): %.tsv$(TRACKING_SUCCESS_SUFFIX) %.model_matrix$(TRACKING_SUCCESS_SUFFIX) | $$(dir $$@)
	if [[ $(call check_model_matrix,$(subst $(TRACKING_SUCCESS_SUFFIX),,$(lastword $^)),$(MINIMUM_VALID_SUBJECT_COUNT),$(MINIMUM_VALID_CASE_COUNT)) ]] ; then \
	$(call log_handler,$(subst $(TRACKING_SUCCESS_SUFFIX),,$@),gzip -c $(subst $(TRACKING_SUCCESS_SUFFIX),,$<) > $(subst $(TRACKING_SUCCESS_SUFFIX),,$@)) ; \
	else \
	rm -f $(subst $(TRACKING_SUCCESS_SUFFIX),$(TRACKING_FAIL_SUFFIX),$@) && touch $@ ; \
	fi


## patterns:
##    output: results/{PHENOTYPE}/{ANCESTRY}/{METHOD}/{PHENOTYPE}.{CHIP}.boltlmm.tsv$(TRACKING_SUCCESS_SUFFIX)
##    input:  [rsid annotation software]
##            [chrpos to rsid linker file]
##            results/{PHENOTYPE}/{ANCESTRY}/{METHOD}/{PHENOTYPE}.{CHIP}.boltlmm.rawids.tsv$(TRACKING_SUCCESS_SUFFIX)
##            results/{PHENOTYPE}/{ANCESTRY}/{METHOD}/{PHENOTYPE}.{CHIP}.boltlmm$(ID_MODE_TRACKER_SUFFIX)
##            results/{PHENOTYPE}/{ANCESTRY}/{METHOD}/{PHENOTYPE}.{CHIP}.boltlmm.model_matrix$(TRACKING_SUCCESS_SUFFIX)
##            results/{PHENOTYPE}/{ANCESTRY}/{METHOD}/
## Notes: replace chr:pos:ref:alt style ids with rsids if requested
%.boltlmm.tsv$(TRACKING_SUCCESS_SUFFIX): $(ANNOTATE_RSID) $(RSID_LINKER_FILE) %.boltlmm.rawids.tsv$(TRACKING_SUCCESS_SUFFIX) %.boltlmm$(ID_MODE_TRACKER_SUFFIX) %.boltlmm.model_matrix$(TRACKING_SUCCESS_SUFFIX) | $$(dir $$@)
	$(eval ID_MODE := $(call get_tracker_parameter,$(word 4,$^)))
	if [[ $(call check_model_matrix,$(subst $(TRACKING_SUCCESS_SUFFIX),,$(lastword $^)),$(MINIMUM_VALID_SUBJECT_COUNT),$(MINIMUM_VALID_CASE_COUNT)) ]] ; then \
	$(call log_handler,$(subst $(TRACKING_SUCCESS_SUFFIX),,$@),$(if $(filter $(CHRPOS_MODE),$(ID_MODE)),ln -fs $(subst $(TRACKING_SUCCESS_SUFFIX),,$(word 3,$^)) $(subst $(TRACKING_SUCCESS_SUFFIX),,$@),$< $(subst $(TRACKING_SUCCESS_SUFFIX),,$(word 3,$^)) $(word 2,$^) $(subst $(TRACKING_SUCCESS_SUFFIX),,$@))) ; \
	else \
	rm -f $(subst $(TRACKING_SUCCESS_SUFFIX),$(TRACKING_FAIL_SUFFIX),$@) && touch $@ ; \
	fi


## patterns:
##    output: results/{PHENOTYPE}/{ANCESTRY}/{METHOD}/{PHENOTYPE}.{CHIP}.boltlmm.rawids.tsv$(TRACKING_SUCCESS_SUFFIX)
##    input:  [frequency annotation software]
##            [frequency annotation data]
##            results/{PHENOTYPE}/{ANCESTRY}/{METHOD}/{PHENOTYPE}.{CHIP}.boltlmm.nofreq.tsv$(TRACKING_SUCCESS_SUFFIX)
##            results/{PHENOTYPE}/{ANCESTRY}/{METHOD}/{PHENOTYPE}.{CHIP}.boltlmm$(FREQUENCY_MODE_TRACKER_SUFFIX)
##            results/{PHENOTYPE}/{ANCESTRY}/{METHOD}/{PHENOTYPE}.{CHIP}.boltlmm.model_matrix$(TRACKING_SUCCESS_SUFFIX)
##            results/{PHENOTYPE}/{ANCESTRY}/{METHOD}/
## Notes: add frequency data to a results file
%.boltlmm.rawids.tsv$(TRACKING_SUCCESS_SUFFIX): $(ANNOTATE_FREQUENCY) $(TOPMED_FREQUENCY_FILE) %.boltlmm.nofreq.tsv$(TRACKING_SUCCESS_SUFFIX) %.boltlmm$(FREQUENCY_MODE_TRACKER_SUFFIX) %.boltlmm.model_matrix$(TRACKING_SUCCESS_SUFFIX) | $$(dir $$@)
	$(eval SUBJECT_FREQUENCIES := $(call get_tracked_parameter,$(word 4,$^)))
	if [[ $(call check_model_matrix,$(subst $(TRACKING_SUCCESS_SUFFIX),,$(lastword $^)),$(MINIMUM_VALID_SUBJECT_COUNT),$(MINIMUM_VALID_CASE_COUNT)) ]] ; then \
	$(call log_handler,$(subst $(TRACKING_SUCCESS_SUFFIX),,$@),$(if $(filter $(SUBJECT_MODE),$(SUBJECT_FREQUENCIES)),ln -fs $(subst $(TRACKING_SUCCESS_SUFFIX),,$(word 3,$^)) $(subst $(TRACKING_SUCCESS_SUFFIX),,$@),$< $(subst $(TRACKING_SUCCESS_SUFFIX),,$(word 3,$^)) $(word 2,$^) $(call resolve_ancestry,$@) $(subst $(TRACKING_SUCCESS_SUFFIX),,$@))) ; \
	else \
	rm -f $(subst $(TRACKING_SUCCESS_SUFFIX),$(TRACKING_FAIL_SUFFIX),$@) && touch $@ ; \
	fi


## patterns:
##    output: results/{PHENOTYPE}/{ANCESTRY}/{METHOD}/{PHENOTYPE}.{CHIP}.boltlmm.nofreq.tsv$(TRACKING_SUCCESS_SUFFIX)
##    input:  results/{PHENOTYPE}/{ANCESTRY}/{METHOD}/{PHENOTYPE}.{CHIP}.chr{CHR}.boltlmm$(TRACKING_SUCCESS_SUFFIX)
##            results/{PHENOTYPE}/{ANCESTRY}/{METHOD}/{PHENOTYPE}.{CHIP}.boltlmm$(FREQUENCY_MODE_TRACKER_SUFFIX)
##    input:  results/{PHENOTYPE}/{ANCESTRY}/{METHOD}/{PHENOTYPE}.{CHIP}.boltlmm.model_matrix$(TRACKING_SUCCESS_SUFFIX)
##    input:  results/{PHENOTYPE}/{ANCESTRY}/{METHOD}/
## Notes: combine results from per-chromosome BOLTLMM runs into a single genome-wide file, suitable for meta-analysis.
## the model matrix is only required here to enforce a preflight sample size check. frequency is set to NA at this step
## and requires a separate processing step
%.boltlmm.nofreq.tsv$(TRACKING_SUCCESS_SUFFIX): $$(foreach chr,$$(CHRS),%.chr$$(chr).boltlmm$(TRACKING_SUCCESS_SUFFIX)) %.boltlmm$(FREQUENCY_MODE_TRACKER_SUFFIX) %.boltlmm.model_matrix$(TRACKING_SUCCESS_SUFFIX) | $$(dir $$@)
	$(eval SUBJECT_FREQUENCIES := $(call get_tracked_parameter,$(filter %$(FREQUENCY_MODE_TRACKER_SUFFIX),$^)))
	if [[ $(call check_model_matrix,$(subst $(TRACKING_SUCCESS_SUFFIX),,$(lastword $^)),$(MINIMUM_VALID_SUBJECT_COUNT),$(MINIMUM_VALID_CASE_COUNT)) ]] ; then \
	$(call log_handler,$(subst $(TRACKING_SUCCESS_SUFFIX),,$@),cat $(filter-out %.model_matrix$(TRACKING_SUCCESS_SUFFIX) %$(FREQUENCY_MODE_TRACKER_SUFFIX),$(subst .boltlmm$(TRACKING_SUCCESS_SUFFIX),.boltlmm,$^)) | awk '! /SNP\tCHR\tBP/ && ! ($$10 ~ /nan/)' | sed 's/ /\t/g' | awk 'NR == 1 {print "CHR\tPOS\tSNP\tTested_Allele\tOther_Allele\tFreq_Tested_Allele_in_TOPMed\tBETA\tSE\tP\tN"} ; {print $$2"\t"$$3"\t"$$1"\t"$$5"\t"$$6"\t$(if $(filter $(SUBJECT_MODE),$(SUBJECT_FREQUENCIES)),"$$7",NA)\t"$$9"\t"$$10"\t"$$11"\t$(strip $(shell wc -l $(subst $(TRACKING_SUCCESS_SUFFIX),,$(lastword $^)) | awk '{print $$1}'))"}' | awk 'NR == 1 ; NR > 1 {$$NF = $$NF - 1 ; print $$0}' > $(subst $(TRACKING_SUCCESS_SUFFIX),,$@)) ; \
	else \
	rm -f $(subst $(TRACKING_SUCCESS_SUFFIX),$(TRACKING_FAIL_SUFFIX),$@) && touch $@ ; \
	fi

## phony clean target to eliminate all BOLT analysis directories
.PHONY: dangerous-clean
dangerous-clean:
	rm -Rf $(sort $(dir $(ANALYSIS_RESULTS_BOLTLMM)))


## utility function to grab {CHIP} out of results/{PHENOTYPE}/{ANCESTRY}/{METHOD}/{PHENOTYPE}.{CHIP}.chr{CHR}.{whatever}
define extract_chip =
$(firstword $(subst _,$(2),$(lastword $(subst ., ,$(word 1,$(subst .chr, ,$(subst GSA_,GSA/,$(1))))))))
endef

## utility function to grab {ANCESTRY} out of results/{PHENOTYPE}/{ANCESTRY}/{METHOD}/{PHENOTYPE}.{CHIP}.chr{CHR}.{whatever}
define extract_ancestry =
$(word 2,$(subst /, ,$(subst $(RESULTS_DIR),,$(1))))
endef

## patterns:
##    output: results/{PHENOTYPE}/{ANCESTRY}/{METHOD}/{PHENOTYPE}.{CHIP}.chr{CHR}.boltlmm$(TRACKING_SUCCESS_SUFFIX)
##    input:  results/{PHENOTYPE}/{ANCESTRY}/{METHOD}/{PHENOTYPE}.{CHIP}.bolt-chip.GRCh38-resorted-nochr0.bed$(TRACKING_SUCCESS_SUFFIX)
##    input:  {BGEN-INPUT}/{CHIP}/{ANCESTRY}/chr{CHR}-filtered.bgen
##    input:  {BGEN-INPUT}/{CHIP}/{ANCESTRY}/chr{CHR}-filtered-noNAs.sample
##    input:  results/{PHENOTYPE}/{ANCESTRY}/{METHOD}/{PHENOTYPE}.{CHIP}.boltlmm.phenotype$(TRACKING_SUCCESS_SUFFIX)
##    input:  results/{PHENOTYPE}/{ANCESTRY}/{METHOD}/{PHENOTYPE}.{CHIP}.boltlmm.covariates$(TRACKING_SUCCESS_SUFFIX)
##    input:  {LDSCORE_FILES}/LDSCORE.1000G_{SUPERCONTINENT}l2.ldscore-reformatted.gz
## Notes: run primary BOLT-LMM analysis by chromosome. requires genotype data directly aligned with LDSCORE information,
## so based on the particularities of the PLCO analysis, the chip data need to be lifted to GRCh38 first. bgen files
## must be v1.2 based on current BOLT (2.3.4) requirements for fast processing. Model matrix is used for on the fly minimum
## sample size enforcement.
$(foreach result,$(ANALYSIS_RESULTS_BOLTLMM),$(patsubst %,$(subst .boltlmm,,$(result)).chr%.boltlmm$(TRACKING_SUCCESS_SUFFIX),$(CHRS))): $$(word 1,$$(subst .chr, ,$$@)).bolt-chip.GRCh38-resorted-nochr0.bed$(TRACKING_SUCCESS_SUFFIX) $$(IMPUTED_DIR)/$$(call extract_chip,$$@,/)/$$(call extract_ancestry,$$@)/$$(lastword $$(subst ., ,$$(subst .boltlmm$(TRACKING_SUCCESS_SUFFIX),,$$@)))-filtered.bgen $$(IMPUTED_DIR)/$$(call extract_chip,$$@,/)/$$(call extract_ancestry,$$@)/$$(lastword $$(subst ., ,$$(subst .boltlmm$(TRACKING_SUCCESS_SUFFIX),,$$@)))-filtered-noNAs.sample $$(word 1,$$(subst .chr, ,$$@)).boltlmm.phenotype$(TRACKING_SUCCESS_SUFFIX) $$(word 1,$$(subst .chr, ,$$@)).boltlmm.covariates$(TRACKING_SUCCESS_SUFFIX) $$(shell $$(SHARED_SOURCE)/resolve_bolt_ldscore.bash $$(call extract_ancestry,$$@) $$(LDSC_DIRECTORY)) $$(word 1,$$(subst .chr, ,$$@)).boltlmm.model_matrix$(TRACKING_SUCCESS_SUFFIX) | $$(dir $$@)
	if [[ $(call check_model_matrix,$(subst $(TRACKING_SUCCESS_SUFFIX),,$(lastword $^)),$(MINIMUM_VALID_SUBJECT_COUNT),$(MINIMUM_VALID_CASE_COUNT)) ]] ; then \
	$(call qsub_handler,$(subst $(TRACKING_SUCCESS_SUFFIX),,$@),$(BOLTLMM_EXECUTABLE) --bfile $(subst .bed$(TRACKING_SUCCESS_SUFFIX),,$(word 1,$^)) --bgenFile $(word 2,$^) --sampleFile $(word 3,$^) --lmm --LDscoresFile=$(word 6,$^) --statsFile=$(subst .boltlmm$(TRACKING_SUCCESS_SUFFIX),.chip_results.boltlmm,$@) --statsFileBgenSnps=$(subst $(TRACKING_SUCCESS_SUFFIX),,$@) --phenoFile $(subst $(TRACKING_SUCCESS_SUFFIX),,$(word 4,$^)) --phenoCol $(shell head -1 $(subst $(TRACKING_SUCCESS_SUFFIX),,$(word 4,$^)) | cut -f 3) $(if $(shell head -1 $(subst $(TRACKING_SUCCESS_SUFFIX),,$(word 5,$^)) | cut -f 1-2 --complement),--covarFile $(subst $(TRACKING_SUCCESS_SUFFIX),,$(word 5,$^)) --qCovarCol $(shell head -1 $(subst $(TRACKING_SUCCESS_SUFFIX),,$(word 5,$^)) | cut -f 1-2 --complement | sed 's/\t/ --qCovarCol /g'),) --LDscoresMatchBp --geneticMapFile $(GRCH38_RECOMBINATION_MAP) > $(subst $(TRACKING_SUCCESS_SUFFIX),.log,$@) 2>&1) ; \
	else \
	rm -f $(subst $(TRACKING_SUCCESS_SUFFIX),$(TRACKING_FAIL_SUFFIX),$@) && touch $@ ; \
	fi

## patterns:
##    output: results/{PHENOTYPE}/{ANCESTRY}/{METHOD}/{PHENOTYPE}.{CHIP}.bolt-chip.GRCh38-resorted-nochr0.bed$(TRACKING_SUCCESS_SUFFIX)
##    input:  results/{PHENOTYPE}/{ANCESTRY}/{METHOD}/{PHENOTYPE}.{CHIP}.bolt-chip.GRCh38-resorted.bed$(TRACKING_SUCCESS_SUFFIX)
##    input:  results/{PHENOTYPE}/{ANCESTRY}/{METHOD}/{PHENOTYPE}.{CHIP}.bolt-chip-GRCh38-resorted-chr0.exclude$(TRACKING_SUCCESS_SUFFIX)
## Notes: remove "0" chromosome annotations for compatibility with BOLT
%.bolt-chip.GRCh38-resorted-nochr0.bed$(TRACKING_SUCCESS_SUFFIX): %.bolt-chip.GRCh38-resorted.bed$(TRACKING_SUCCESS_SUFFIX) %.bolt-chip.GRCh38-resorted.chr0.exclude$(TRACKING_SUCCESS_SUFFIX) | $$(dir $$@)
	$(call qsub_handler,$(subst $(TRACKING_SUCCESS_SUFFIX),,$@),$(PLINK19) --bfile $(subst .bed$(TRACKING_SUCCESS_SUFFIX),,$<) --exclude $(subst $(TRACKING_SUCCESS_SUFFIX),,$(word 2,$^)) --make-bed --out $(subst .bed$(TRACKING_SUCCESS_SUFFIX),,$@))

## patterns:
##    output: results/{PHENOTYPE}/{ANCESTRY}/{METHOD}/{PHENOTYPE}.{CHIP}.bolt-chip.GRCh38-resorted.chr0.exclude$(TRACKING_SUCCESS_SUFFIX)
##    input:  results/{PHENOTYPE}/{ANCESTRY}/{METHOD}/{PHENOTYPE}.{CHIP}.bolt-chip.GRCh38-resorted.bed$(TRACKING_SUCCESS_SUFFIX) (really bim)
## Notes: get a plink-format exclude file for variants with unlocalized chromosome
%.bolt-chip.GRCh38-resorted.chr0.exclude$(TRACKING_SUCCESS_SUFFIX): %.bolt-chip.GRCh38-resorted.bed$(TRACKING_SUCCESS_SUFFIX) | $$(dir $$@)
	$(call log_handler,$(subst $(TRACKING_SUCCESS_SUFFIX),,$@),awk '$$1 == 0 {print $$2}' $(subst .bed$(TRACKING_SUCCESS_SUFFIX),.bim,$<) > $(subst $(TRACKING_SUCCESS_SUFFIX),,$@))

## patterns:
##    output: results/{PHENOTYPE}/{ANCESTRY}/{METHOD}/{PHENOTYPE}.{CHIP}.bolt-chip.GRCh38-resorted.bed$(TRACKING_SUCCESS_SUFFIX)
##    input:  results/{PHENOTYPE}/{ANCESTRY}/{METHOD}/{PHENOTYPE}.{CHIP}.bolt-chip.GRCh38.bed$(TRACKING_SUCCESS_SUFFIX)
##    input:  results/{PHENOTYPE}/{ANCESTRY}/{METHOD}/{PHENOTYPE}.{CHIP}.bolt-chip-GRCh38.bim$(TRACKING_SUCCESS_SUFFIX)
##    input:  results/{PHENOTYPE}/{ANCESTRY}/{METHOD}/{PHENOTYPE}.{CHIP}.bolt-chip.GRCh38.fam$(TRACKING_SUCCESS_SUFFIX)
## Notes: liftover likely breaks order of variants in the genome; quickest solution is just to reload and rewrite everything with plink.
%.bolt-chip.GRCh38-resorted.bed$(TRACKING_SUCCESS_SUFFIX): %.bolt-chip.GRCh38.bed$(TRACKING_SUCCESS_SUFFIX) %.bolt-chip.GRCh38.bim$(TRACKING_SUCCESS_SUFFIX) %.bolt-chip.GRCh38.fam$(TRACKING_SUCCESS_SUFFIX) | $$(dir $$@)
	$(call qsub_handler,$(subst $(TRACKING_SUCCESS_SUFFIX),,$@),$(PLINK19) --bed $(subst $(TRACKING_SUCCESS_SUFFIX),,$<) --bim $(subst $(TRACKING_SUCCESS_SUFFIX),,$(word 2,$^)) --fam $(subst $(TRACKING_SUCCESS_SUFFIX),,$(word 3,$^)) --allow-extra-chr 0 --make-bed --out $(subst .bed$(TRACKING_SUCCESS_SUFFIX),,$@))

## patterns:
##    output: results/{PHENOTYPE}/{ANCESTRY}/{METHOD}/{PHENOTYPE}.{CHIP}.boltlmm.samples$(TRACKING_SUCCESS_SUFFIX)
##    input:  {IMPUTED_DATA}/{CHIP}/{ANCESTRY}/chr22-filtered-noNAs.sample
##    input:  results/{PHENOTYPE}/{ANCESTRY}/{METHOD}/
## Notes: final subject list for actual imputed data. used for compatibility with SAIGE shared code. some applications
## to ensure synchronization between chip and imputed data are no longer necessary in final PLCO dataset
%.boltlmm.samples$(TRACKING_SUCCESS_SUFFIX): $$(IMPUTED_DIR)/$$(subst GSA_,GSA/,$$(word 2,$$(subst ., ,$$(notdir $$@))))/$$(lastword $$(subst /, ,$$(subst BOLTLMM,,$$(dir $$@))))/chr22-filtered-noNAs.sample | $$(dir $$@)
	$(call log_handler,$(subst $(TRACKING_SUCCESS_SUFFIX),,$@),awk 'NR > 2 {print $$1"_"$$1}' $< > $(subst $(TRACKING_SUCCESS_SUFFIX),,$@))

## patterns:
##    output: results/{PHENOTYPE}/{ANCESTRY}/{METHOD}/{PHENOTYPE}.{CHIP}.bolt-chip.GRCh38.bed$(TRACKING_SUCCESS_SUFFIX)
##    input:  results/{PHENOTYPE}/{ANCESTRY}/{METHOD}/{PHENOTYPE}.{CHIP}.bolt-chip.lift-failures-excluded.bed$(TRACKING_SUCCESS_SUFFIX)
## Notes: this was a late addition to the pipeline, as it was originally tested on chip data in hg19 but then deployed on
## imputed data in GRCh38. so it's just a hack liftover intermediate step.
%.bolt-chip.GRCh38.bed$(TRACKING_SUCCESS_SUFFIX): %.bolt-chip.lift-failures-excluded.bed$(TRACKING_SUCCESS_SUFFIX) | $$(dir $$@)
	$(call log_handler,$(subst $(TRACKING_SUCCESS_SUFFIX),,$@),cp $(subst $(TRACKING_SUCCESS_SUFFIX),,$<) $(subst $(TRACKING_SUCCESS_SUFFIX),,$@))

## patterns:
##    output: results/{PHENOTYPE}/{ANCESTRY}/{METHOD}/{PHENOTYPE}.{CHIP}.bolt-chip.GRCh38.bim$(TRACKING_SUCCESS_SUFFIX)
##    input:  results/{PHENOTYPE}/{ANCESTRY}/{METHOD}/{PHENOTYPE}.{CHIP}.bolt-chip.lift-failures-excluded.bed$(TRACKING_SUCCESS_SUFFIX) (really bim)
##    input:  results/{PHENOTYPE}/{ANCESTRY}/{METHOD}/{PHENOTYPE}.{CHIP}.bolt-chip.liftover-output$(TRACKING_SUCCESS_SUFFIX)
## Notes: this was a late addition to the pipeline, as it was originally tested on chip data in hg19 but then deployed on
## imputed data in GRCh38. hack liftover data by taking liftover output and manually swapping in new position data over old.
%.bolt-chip.GRCh38.bim$(TRACKING_SUCCESS_SUFFIX): %.bolt-chip.lift-failures-excluded.bed$(TRACKING_SUCCESS_SUFFIX) %.bolt-chip.liftover-output$(TRACKING_SUCCESS_SUFFIX) | $$(dir $$@)
	$(call log_handler,$(subst $(TRACKING_SUCCESS_SUFFIX),,$@),paste $(subst $(TRACKING_SUCCESS_SUFFIX),,$(word 2,$^)) $(subst .bed$(TRACKING_SUCCESS_SUFFIX),.bim,$<) | sed 's/^chr//' | awk '{print $$1"\t"$$5"\t"$$6"\t"$$2+1"\t"$$8"\t"$$9}' > $(subst $(TRACKING_SUCCESS_SUFFIX),,$@))

## patterns:
##    output: results/{PHENOTYPE}/{ANCESTRY}/{METHOD}/{PHENOTYPE}.{CHIP}.bolt-chip.GRCh38.fam$(TRACKING_SUCCESS_SUFFIX)
##    input:  results/{PHENOTYPE}/{ANCESTRY}/{METHOD}/{PHENOTYPE}.{CHIP}.bolt-chip.lift-failures-excluded.bed$(TRACKING_SUCCESS_SUFFIX) (really fam)
## Notes: this was a late addition to the pipeline, as it was originally tested on chip data in hg19 but then deployed on
## imputed data in GRCh38. so it's just a hack liftover intermediate step.
%.bolt-chip.GRCh38.fam$(TRACKING_SUCCESS_SUFFIX): %.bolt-chip.lift-failures-excluded.bed$(TRACKING_SUCCESS_SUFFIX) | $$(dir $$@)
	$(call log_handler,$(subst $(TRACKING_SUCCESS_SUFFIX),,$@),cp $(subst .bed$(TRACKING_SUCCESS_SUFFIX),.fam,$<) $(subst $(TRACKING_SUCCESS_SUFFIX),,$@))

## patterns:
##    output: results/{PHENOTYPE}/{ANCESTRY}/{METHOD}/{PHENOTYPE}.{CHIP}.bolt-chip.lift-failures-excluded.bed$(TRACKING_SUCCESS_SUFFIX)
##    input:  results/{PHENOTYPE}/{ANCESTRY}/{METHOD}/{PHENOTYPE}.{CHIP}.bolt-chip.bed$(TRACKING_SUCCESS_SUFFIX)
##    input:  results/{PHENOTYPE}/{ANCESTRY}/{METHOD}/{PHENOTYPE}.{CHIP}.bolt-chip.liftover.exclude$(TRACKING_SUCCESS_SUFFIX)
## Notes: first step to updating plink file with GRCh38 lifted positions: remove variants that failed lift, in order
%.bolt-chip.lift-failures-excluded.bed$(TRACKING_SUCCESS_SUFFIX): %.bolt-chip.bed$(TRACKING_SUCCESS_SUFFIX) %.bolt-chip.liftover.exclude$(TRACKING_SUCCESS_SUFFIX) | $$(dir $$@)
	$(call qsub_handler,$(subst $(TRACKING_SUCCESS_SUFFIX),,$@),$(PLINK19) --bfile $(subst .bed$(TRACKING_SUCCESS_SUFFIX),,$<) --exclude $(subst $(TRACKING_SUCCESS_SUFFIX),,$(word 2,$^)) --make-bed --out $(subst .bed$(TRACKING_SUCCESS_SUFFIX),,$@))

## patterns:
##    output: results/{PHENOTYPE}/{ANCESTRY}/{METHOD}/{PHENOTYPE}.{CHIP}.bolt-chip.liftover.exclude$(TRACKING_SUCCESS_SUFFIX)
##    input:  results/{PHENOTYPE}/{ANCESTRY}/{METHOD}/{PHENOTYPE}.{CHIP}.bolt-chip.liftover-output$(TRACKING_SUCCESS_SUFFIX) (really liftover-failure)
## Notes: convert failed lifts into a plink-format exclude file
%.bolt-chip.liftover.exclude$(TRACKING_SUCCESS_SUFFIX): %.bolt-chip.liftover-output$(TRACKING_SUCCESS_SUFFIX) | $$(dir $$@)
	$(call log_handler,$(subst $(TRACKING_SUCCESS_SUFFIX),,$@),awk '! /^#/ {print $$1":"$$2+1}' $(subst liftover-output$(TRACKING_SUCCESS_SUFFIX),liftover-failure,$<) | sed 's/^chr//' > $(subst $(TRACKING_SUCCESS_SUFFIX),,$@))

## patterns:
##    output: results/{PHENOTYPE}/{ANCESTRY}/{METHOD}/{PHENOTYPE}.{CHIP}.bolt-chip.liftover-output$(TRACKING_SUCCESS_SUFFIX)
##    input:  results/{PHENOTYPE}/{ANCESTRY}/{METHOD}/{PHENOTYPE}.{CHIP}.bolt-chip.liftover-input$(TRACKING_SUCCESS_SUFFIX)
## Notes: run liftover, chips are in hg19 and imputed data are in GRCh38
%.bolt-chip.liftover-output$(TRACKING_SUCCESS_SUFFIX): %.bolt-chip.liftover-input$(TRACKING_SUCCESS_SUFFIX) | $$(dir $$@)
	$(call log_handler,$(subst $(TRACKING_SUCCESS_SUFFIX),,$@),$(LIFTOVER_EXECUTABLE) $(subst $(TRACKING_SUCCESS_SUFFIX),,$<) $(LIFTOVER_19_TO_38) $(subst $(TRACKING_SUCCESS_SUFFIX),,$@) $(subst liftover-output$(TRACKING_SUCCESS_SUFFIX),liftover-failure,$@))

## patterns:
##    output: results/{PHENOTYPE}/{ANCESTRY}/{METHOD}/{PHENOTYPE}.{CHIP}.bolt-chip.liftover-input$(TRACKING_SUCCESS_SUFFIX)
##    input:  results/{PHENOTYPE}/{ANCESTRY}/{METHOD}/{PHENOTYPE}.{CHIP}.bolt-chip.bed$(TRACKING_SUCCESS_SUFFIX)
## Notes: 
%.bolt-chip.liftover-input$(TRACKING_SUCCESS_SUFFIX): %.bolt-chip.bed$(TRACKING_SUCCESS_SUFFIX) | $$(dir $$@)
	$(call log_handler,$(subst $(TRACKING_SUCCESS_SUFFIX),,$@),awk '{print "chr"$$1"\t"$$4-1"\t"$$4}' $(subst .bed$(TRACKING_SUCCESS_SUFFIX),.bim,$<) > $(subst $(TRACKING_SUCCESS_SUFFIX),,$@))

## patterns:
##    output: results/{PHENOTYPE}/{ANCESTRY}/{METHOD}/{PHENOTYPE}.{CHIP}.bolt-chip.bed$(TRACKING_SUCCESS_SUFFIX)
##    input:  {CLEANED_CHIPS_BY_ANCESTRY}/{ANCESTRY}/{CHIP}.nohet.autosomes.bed
##    input:  results/{PHENOTYPE}/{ANCESTRY}/{METHOD}/{PHENOTYPE}.{CHIP}.boltlmm.samples.plink-format$(TRACKING_SUCCESS_SUFFIX)
##    input:  {CLEANED_CHIPS_BY_ANCESTRY}/{ANCESTRY}/{CHIP}.step2.pruning.prune.in
##    input:  {CLEANED_CHIPS_BY_ANCESTRY}/{ANCESTRY}/{CHIP}.step3.pruning.prune.out
## Notes: gets an ancestry-specific LD-pruned (more or less) dataset for BOLT heritability estimation.
%.bolt-chip.bed$(TRACKING_SUCCESS_SUFFIX): $(GENOTYPE_DIR)/$$(call extract_ancestry,$$@)/$$(firstword $$(subst /, ,$$(call extract_chip,$$(subst .bolt-chip.bed$(TRACKING_SUCCESS_SUFFIX),,$$@),/))).nohet.autosomes.bed %.boltlmm.samples.plink-format$(TRACKING_SUCCESS_SUFFIX) $(GENOTYPE_DIR)/$$(call extract_ancestry,$$@)/$$(firstword $$(subst /, ,$$(call extract_chip,$$(subst .bolt-chip.bed$(TRACKING_SUCCESS_SUFFIX),,$$@),/))).step2.pruning.prune.in $(GENOTYPE_DIR)/$$(call extract_ancestry,$$@)/$$(firstword $$(subst /, ,$$(call extract_chip,$$(subst .bolt-chip.bed$(TRACKING_SUCCESS_SUFFIX),,$$@),/))).step3.pruning.prune.out | $$(dir $$@)
	$(call qsub_handler,$(subst $(TRACKING_SUCCESS_SUFFIX),,$@),$(PLINK19) --bfile $(subst .bed,,$<) --keep $(subst $(TRACKING_SUCCESS_SUFFIX),,$(word 2,$^)) --extract $(word 3,$^) --exclude $(word 4,$^) --make-bed --out $(subst .bed$(TRACKING_SUCCESS_SUFFIX),,$@))

## patterns:
##    output: results/{PHENOTYPE}/{ANCESTRY}/{METHOD}/{PHENOTYPE}.{CHIP}.boltlmm.samples.plink-format$(TRACKING_SUCCESS_SUFFIX)
##    input:  results/{PHENOTYPE}/{ANCESTRY}/{METHOD}/{PHENOTYPE}.{CHIP}.boltlmm.samples$(TRACKING_SUCCESS_SUFFIX)
## Notes: take single column subject ID list and duplicate it into two columns, for plink --keep convention.
%.boltlmm.samples.plink-format$(TRACKING_SUCCESS_SUFFIX): %.boltlmm.samples$(TRACKING_SUCCESS_SUFFIX) | $$(dir $$@)
	$(call log_handler,$(subst $(TRACKING_SUCCESS_SUFFIX),,$@),awk '{print $$1}' $(subst $(TRACKING_SUCCESS_SUFFIX),,$<) | sed 's/_/\t/g' > $(subst $(TRACKING_SUCCESS_SUFFIX),,$@))

## patterns:
##    output: results/{PHENOTYPE}/{ANCESTRY}/{METHOD}/{PHENOTYPE}.{CHIP}.boltlmm.phenotype$(TRACKING_SUCCESS_SUFFIX)
##    input:  results/{PHENOTYPE}/{ANCESTRY}/{METHOD}/{PHENOTYPE}.{CHIP}.boltlmm.model_matrix$(TRACKING_SUCCESS_SUFFIX)
## Notes: rips out just the FID/IID and phenotype, assuming phenotype is in column 3
%.boltlmm.phenotype$(TRACKING_SUCCESS_SUFFIX): %.boltlmm.model_matrix$(TRACKING_SUCCESS_SUFFIX) | $$(dir $$@)
	$(call log_handler,$(subst $(TRACKING_SUCCESS_SUFFIX),,$@),cut -f 1-3 $(subst $(TRACKING_SUCCESS_SUFFIX),,$<) > $(subst $(TRACKING_SUCCESS_SUFFIX),,$@))

## patterns:
##    output: results/{PHENOTYPE}/{ANCESTRY}/{METHOD}/{PHENOTYPE}.{CHIP}.boltlmm.covariates$(TRACKING_SUCCESS_SUFFIX)
##    input:  results/{PHENOTYPE}/{ANCESTRY}/{METHOD}/{PHENOTYPE}.{CHIP}.boltlmm.model_matrix$(TRACKING_SUCCESS_SUFFIX)
## Notes: this assumes the phenotype is in column 3 of the model matrix.
## also assumes preprocessing of categoricals into binary dummies and eliminates the correct use of ordinals
%.boltlmm.covariates$(TRACKING_SUCCESS_SUFFIX): %.boltlmm.model_matrix$(TRACKING_SUCCESS_SUFFIX) | $$(dir $$@)
	$(call log_handler,$(subst $(TRACKING_SUCCESS_SUFFIX),,$@),cut -f 3 --complement $(subst $(TRACKING_SUCCESS_SUFFIX),,$<) > $(subst $(TRACKING_SUCCESS_SUFFIX),,$@))

## patterns:
##    output: results/{PHENOTYPE}/{ANCESTRY}/{METHOD}/{PHENOTYPE}.{CHIP}.boltlmm.model_matrix$(TRACKING_SUCCESS_SUFFIX)
##    input:  results/{PHENOTYPE}/{ANCESTRY}/{METHOD}/{PHENOTYPE}.{CHIP}.boltlmm$(PHENOTYPE_DATASET_TRACKER_SUFFIX)
##    input:  results/{PHENOTYPE}/{ANCESTRY}/{METHOD}/{PHENOTYPE}.{CHIP}.boltlmm$(PHENOTYPE_NAME_TRACKER_SUFFIX)
##    input:  results/{PHENOTYPE}/{ANCESTRY}/{METHOD}/{PHENOTYPE}.{CHIP}.boltlmm$(COVARIATE_NAME_TRACKER_SUFFIX)
##    input:  results/{PHENOTYPE}/{ANCESTRY}/{METHOD}/{PHENOTYPE}.{CHIP}.boltlmm$(TRANSFORMATION_TRACKER_SUFFIX)
##    input:  results/{PHENOTYPE}/{ANCESTRY}/{METHOD}/{PHENOTYPE}.{CHIP}.boltlmm$(SEX_SPECIFIC_TRACKER_SUFFIX)
##    input:  results/{PHENOTYPE}/{ANCESTRY}/{METHOD}/{PHENOTYPE}.{CHIP}.boltlmm$(CONTROL_INCLUSION_TRACKER_SUFFIX)
##    input:  results/{PHENOTYPE}/{ANCESTRY}/{METHOD}/{PHENOTYPE}.{CHIP}.boltlmm$(CONTROL_EXCLUSION_TRACKER_SUFFIX)
##    input:  results/{PHENOTYPE}/{ANCESTRY}/{METHOD}/{PHENOTYPE}.{CHIP}.boltlmm.samples$(TRACKING_SUCCESS_SUFFIX)
##    input:  results/{PHENOTYPE}/{ANCESTRY}/{METHOD}/
## Notes: build a model matrix containing phenotype and covariate data for all relevant subjects. for truly esoteric reasons
## this is separately submitted to the cluster. Direct config file dependency has been removed to prevent
## repeated reruns due to version control, unrelated database updates, and other trivial issues.
%.boltlmm.model_matrix$(TRACKING_SUCCESS_SUFFIX): %.boltlmm$(PHENOTYPE_DATASET_TRACKER_SUFFIX) %.boltlmm$(PHENOTYPE_NAME_TRACKER_SUFFIX) %.boltlmm$(COVARIATE_NAME_TRACKER_SUFFIX) %.boltlmm$(TRANSFORMATION_TRACKER_SUFFIX) %.boltlmm$(SEX_SPECIFIC_TRACKER_SUFFIX) %.boltlmm$(CONTROL_INCLUSION_TRACKER_SUFFIX) %.boltlmm$(CONTROL_EXCLUSION_TRACKER_SUFFIX) %.boltlmm.samples$(TRACKING_SUCCESS_SUFFIX) | $$(dir $$@)
	$(call qsub_handler,$(subst $(TRACKING_SUCCESS_SUFFIX),,$@),Rscript $(SHARED_SOURCE)/construct_model_matrix.R $(PHENOTYPE_FILENAME) $(subst $(TRACKING_SUCCESS_SUFFIX),,$(lastword $^)) $(word 2,$(subst /, ,$(subst $(RESULTS_DIR),,$@))) $(lastword $(subst ., ,$(subst .boltlmm.model_matrix$(TRACKING_SUCCESS_SUFFIX),,$@))) $(call get_tracked_parameter,$(word 2,$^)) $(call get_tracked_parameter,$(word 3,$^)) $(subst $(TRACKING_SUCCESS_SUFFIX),,$@) NA $(call get_tracked_parameter,$(word 4,$^)) $(call get_tracked_parameter,$(word 5,$^)) $(call get_tracked_parameter_list,$(word 6,$^)) $(call get_tracked_parameter_list,$(word 7,$^)))

## patterns:
##    output: results/{PHENOTYPE}/{ANCESTRY}/{METHOD}/
## Notes: build the output directory tree if needed.
$(sort $(dir $(ANALYSIS_RESULTS_BOLTLMM))):
	mkdir -p $@

## phony target for removing intermediate files. Somewhat dangerous but extremely helpful for disk usage
secondary-clean:
	for analysis in $(ANALYSIS_RESULTS_BOLTLMM) ; \
	do \
	touch $$analysis$(FINALIZATION_TRACKER_SUFFIX) ; \
	done
	for dir in $(dir $(ANALYSIS_RESULTS_BOLTLMM)) ; \
	do \
	rm -f $$dir/*boltlmm ; \
	rm -f $$dir/*bed ; \
	rm -f $$dir/*bim ; \
	rm -f $$dir/*fam ; \
	rm -f $$dir/*plot_ready ; \
	rm -f $$dir/*tsv ; \
	done
