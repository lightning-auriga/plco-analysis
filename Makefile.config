PROJECT_BASE_DIR := /CGF/GWAS/Scans/PLCO/builds/1/plco-analysis

PLATFORMS := OmniX Omni25 Omni5 Oncoarray $(patsubst %,GSA_batch%,$(shell seq 1 5))
CHIP_FREEZE_INPUT_DIR := $(PROJECT_BASE_DIR)/../current-chip-final-subjects
EXTERNAL_FILE_INPUT_DIR := $(PROJECT_BASE_DIR)/external-files
FILTERED_IMPUTED_INPUT_DIR := $(PROJECT_BASE_DIR)/../filtered-dosage-data
CONFIG_INPUT_DIR := $(PROJECT_BASE_DIR)/config
KG_REFERENCE_INPUT_DIR := $(PROJECT_BASE_DIR)/1KG_files

BGEN_OUTPUT_DIR := $(PROJECT_BASE_DIR)/bgen
CLEANED_CHIP_OUTPUT_DIR := $(PROJECT_BASE_DIR)/cleaned-chips-by-ancestry
ANCESTRY_OUTPUT_DIR := $(PROJECT_BASE_DIR)/ancestry
RELATEDNESS_OUTPUT_DIR := $(PROJECT_BASE_DIR)/relatedness
LDSC_OUTPUT_DIR := $(PROJECT_BASE_DIR)/ldsc
POLMM_FLAT_DOSAGE_OUTPUT_DIR := $(PROJECT_BASE_DIR)/flat-dosages
FASTGWA_GRM_OUTPUT_DIR := $(PROJECT_BASE_DIR)/fastgwa-grm
RESULT_OUTPUT_DIR := $(PROJECT_BASE_DIR)/results
GLOBUS_OUTPUT_DIR := $(PROJECT_BASE_DIR)/globus
SHARED_MAKEFILES := $(PROJECT_BASE_DIR)/shared-makefiles
SHARED_SOURCE := $(PROJECT_BASE_DIR)/shared-source
CHRS := $(shell seq 1 22)
UNIQUE_SUBJECT_LIST := $(EXTERNAL_FILE_INPUT_DIR)/PLCO_final_subject_list_Ancestry_UniqGenotypePlatform_04132020.txt

PHENOTYPE_FILENAME := $(PROJECT_BASE_DIR)/phenotypes/v8/atlas_v8.with_na.augmented.03august2020.tsv

N_THREADS := 2

## 1000 Genomes reference data information for ldscores for use with BOLT
KG_GENOTYPES_PREFIX := $(KG_REFERENCE_INPUT_DIR)/ALL.chr
KG_GENOTYPES_SUFFIX := .shapeit2_integrated_v1a.GRCh38.20181129.phased.vcf.gz
## this variable is only required if you want the pipeline to download the 1KG data for you
KG_DOWNLOAD_SITE := ftp://ftp.1000genomes.ebi.ac.uk/vol1/ftp/data_collections/1000_genomes_project/release/20181203_biallelic_SNV

## supported software
PLINK_MEMORY_LIMIT := 16000
PLINK19 := plink --memory $(PLINK_MEMORY_LIMIT)
PLINK2 := /home/palmercd/Development/plink2/plink2 --memory $(PLINK_MEMORY_LIMIT)
LIFTOVER_EXECUTABLE := /home/palmercd/Development/stage/bin/liftOver
LIFTOVER_19_TO_38 := /home/palmercd/Development/stage/share/liftover_chains/hg19ToHg38.over.chain.gz
BGENIX := /CGF/Bioinformatics/Production/palmercd/bgen/gavinband-bgen-44fcabbc5c38/build/apps/bgenix
BOLTLMM_EXECUTABLE := /home/palmercd/Development/BOLT-LMM_v2.3.4/bolt
GRCH38_RECOMBINATION_MAP := /home/palmercd/Development/BOLT-LMM_v2.3.4/tables/genetic_map_hg38_withX.txt.gz
GCTA := /home/palmercd/Development/gcta_1.93.1beta/gcta64
SMARTPCA := /home/palmercd/Development/EIG-6.1.4/bin/smartpca

LDSC_PY := /home/palmercd/Development/ldsc/ldsc.py

ANNOTATE_FREQUENCY := /CGF/GWAS/Scans/PLCO/builds/1/analysis-requests/frequency-mapping/annotate_frequency.out
TOPMED_FREQUENCY_FILE := /CGF/Bioinformatics/Production/Shilpa/RefFiles/TOPMed/TOPMed_5b_reconstructed_hg38.legend
SAIGE_ROUND_1_SCRIPT := $(SHARED_SOURCE)/saige_round1.R
SAIGE_ROUND_1_RELATEDNESS_CUTOFF := 0.05
SAIGE_ROUND_2_SCRIPT := $(SHARED_SOURCE)/saige_round2.R

GRAF_INSTALL_PREFIX := /CGF/Bioinformatics/Production/palmercd/GRAF/GRAF

GRAF_EXECUTABLE := $(GRAF_INSTALL_PREFIX)/graf
GRAF_POP := $(GRAF_INSTALL_PREFIX)/PlotPopulations.pl
GRAF_1KG_VARIANT_BIMFILE := $(GRAF_INSTALL_PREFIX)/G1000FpGeno.bim
CLEANED_ANCESTRY_NAMES := European East_Asian Other South_Asian African_American Hispanic1 Hispanic2

METAL_EXECUTABLE := /home/palmercd/Development/METAL/generic-metal/metal

QSUB_JOB_MONITOR := /home/palmercd/Development/stage/bin/qsub_job_monitor.out
ACTIVE_JOB_MONITOR := $(QSUB_JOB_MONITOR)

SUPPORTED_METHODS := saige boltlmm fastgwa

## software subject count restrictions
FASTGWA_MINIMUM_VALID_SUBJECT_COUNT := 2000
BOLTLMM_MINIMUM_VALID_SUBJECT_COUNT := 3000
SAIGE_MINIMUM_VALID_SUBJECT_COUNT := 1001
PLINK_MINIMUM_VALID_SUBJECT_COUNT := 100

MINIMUM_VALID_CASE_COUNT := 30

## chip cleaning parameters
HET_F_MAX := 0.2
PIHAT_MIN := 0.05
SAMPLE_SIZE_MIN := 10
SAMPLE_SIZE_LARGE := 10000
GENOME_GZ_JOB_SPLIT := 20

## LDSCORES estimation parameters
LDSC_MAF_THRESHOLD := 0.005


## utility functions

## job submission
define qsub_handler
rm -f $(1).success $(1).fail ; \
echo -e "$(2) \nif [[ \"\$$?\" -eq \"0\" ]] ; then \n\ttouch $(1).success\nelse\n\ttouch $(1).fail \nfi\nexit 0" > $(1).command.bash ; \
$(ACTIVE_JOB_MONITOR) -o $(1) -r h_rt=23:10:00 -q all.q -c $(1).command.bash -t 10
endef

define qsub_handler_long
rm -f $(1).success $(1).fail ; \
echo -e "$(2) \nif [[ \"\$$?\" -eq \"0\" ]] ; then \n\ttouch $(1).success\nelse\n\ttouch $(1).fail \nfi\nexit 0" > $(1).command.bash ; \
$(ACTIVE_JOB_MONITOR) -o $(1) -r h_rt=71:00:00 -q long.q -c $(1).command.bash -t 10
endef

define qsub_handler_specify_queue_time
rm -f $(1).success $(1).fail ; \
echo -e "$(2) \nif [[ \"\$$?\" -eq \"0\" ]] ; then \n\ttouch $(1).success\nelse\n\ttouch $(1).fail \nfi\nexit 0" > $(1).command.bash ; \
$(ACTIVE_JOB_MONITOR) -o $(1) -r h_rt=$(if $(4),$(4),23:00:00) -q $(if $(3),$(3),all.q) -c $(1).command.bash -t 10
endef


## convert GRAF-style harmonized ancestries to supercontinent; simplified for now
define resolve_ancestry
$(if $(filter European,$(word 2,$(subst /, ,$(subst $(RESULT_OUTPUT_DIR),,$(1))))),EUR,EAS)
endef


## compute the name of the config file corresponding to a given results directory path
define compute_config
$(shell $(SHARED_SOURCE)/get_config_filename.bash $(firstword $(subst /, ,$(subst $(RESULT_OUTPUT_DIR), ,$(1)))) $(CONFIG_INPUT_DIR))
endef

## pull out frequency style request from specified config file
SUBJECT_MODE := subject
REFERENCE_MODE := reference
